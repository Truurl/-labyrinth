
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f78  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005548  08005548  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005550  08005550  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08005558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000058  080055b0  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080055b0  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0fc  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d94  00000000  00000000  0002e184  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002ff18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  00030ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d02  00000000  00000000  000315d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a2f4  00000000  00000000  000522da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5286  00000000  00000000  0005c5ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121854  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003108  00000000  00000000  001218d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000058 	.word	0x20000058
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050e8 	.word	0x080050e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	080050e8 	.word	0x080050e8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <intToChar>:
    if(value < 10) return '0' + value;

    return 'a' + value - 10;
}

char intToChar(int value) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	switch(value){
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b09      	cmp	r3, #9
 8000d10:	d82a      	bhi.n	8000d68 <intToChar+0x64>
 8000d12:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <intToChar+0x14>)
 8000d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d18:	08000d41 	.word	0x08000d41
 8000d1c:	08000d45 	.word	0x08000d45
 8000d20:	08000d49 	.word	0x08000d49
 8000d24:	08000d4d 	.word	0x08000d4d
 8000d28:	08000d51 	.word	0x08000d51
 8000d2c:	08000d55 	.word	0x08000d55
 8000d30:	08000d59 	.word	0x08000d59
 8000d34:	08000d5d 	.word	0x08000d5d
 8000d38:	08000d61 	.word	0x08000d61
 8000d3c:	08000d65 	.word	0x08000d65
	case 0:
		return '0';
 8000d40:	2330      	movs	r3, #48	; 0x30
 8000d42:	e012      	b.n	8000d6a <intToChar+0x66>
	case 1:
		return '1';
 8000d44:	2331      	movs	r3, #49	; 0x31
 8000d46:	e010      	b.n	8000d6a <intToChar+0x66>
	case 2:
		return '2';
 8000d48:	2332      	movs	r3, #50	; 0x32
 8000d4a:	e00e      	b.n	8000d6a <intToChar+0x66>
	case 3:
		return '3';
 8000d4c:	2333      	movs	r3, #51	; 0x33
 8000d4e:	e00c      	b.n	8000d6a <intToChar+0x66>
	case 4:
		return '4';
 8000d50:	2334      	movs	r3, #52	; 0x34
 8000d52:	e00a      	b.n	8000d6a <intToChar+0x66>
	case 5:
		return '5';
 8000d54:	2335      	movs	r3, #53	; 0x35
 8000d56:	e008      	b.n	8000d6a <intToChar+0x66>
	case 6:
		return '6';
 8000d58:	2336      	movs	r3, #54	; 0x36
 8000d5a:	e006      	b.n	8000d6a <intToChar+0x66>
	case 7:
		return '7';
 8000d5c:	2337      	movs	r3, #55	; 0x37
 8000d5e:	e004      	b.n	8000d6a <intToChar+0x66>
	case 8:
		return '8';
 8000d60:	2338      	movs	r3, #56	; 0x38
 8000d62:	e002      	b.n	8000d6a <intToChar+0x66>
	case 9:
		return '9';
 8000d64:	2339      	movs	r3, #57	; 0x39
 8000d66:	e000      	b.n	8000d6a <intToChar+0x66>
	default:
		return '\0';
 8000d68:	2300      	movs	r3, #0
	}
	return '\0';
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <displayReset>:





void displayReset(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <displayReset+0x24>)
 8000d82:	f001 ff27 	bl	8002bd4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000d86:	2064      	movs	r0, #100	; 0x64
 8000d88:	f001 fc2a 	bl	80025e0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin,GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <displayReset+0x24>)
 8000d92:	f001 ff1f 	bl	8002bd4 <HAL_GPIO_WritePin>
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40020400 	.word	0x40020400

08000da0 <displayCmd>:


void displayCmd(uint8_t cmd){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	//transmisja polecenia
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2110      	movs	r1, #16
 8000dae:	480b      	ldr	r0, [pc, #44]	; (8000ddc <displayCmd+0x3c>)
 8000db0:	f001 ff10 	bl	8002bd4 <HAL_GPIO_WritePin>
	//odblokowanei zegara
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);	
 8000db4:	2200      	movs	r2, #0
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <displayCmd+0x3c>)
 8000dba:	f001 ff0b 	bl	8002bd4 <HAL_GPIO_WritePin>
	//transmisja danych
	HAL_SPI_Transmit(&hspi3,&cmd,1,100);
 8000dbe:	1df9      	adds	r1, r7, #7
 8000dc0:	2364      	movs	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <displayCmd+0x40>)
 8000dc6:	f003 fbb9 	bl	800453c <HAL_SPI_Transmit>
	//blokada zegara
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <displayCmd+0x3c>)
 8000dd0:	f001 ff00 	bl	8002bd4 <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	200000d4 	.word	0x200000d4

08000de4 <displayWrite>:

void displayWrite(uint8_t data){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	//wyb�r danych
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2110      	movs	r1, #16
 8000df2:	480b      	ldr	r0, [pc, #44]	; (8000e20 <displayWrite+0x3c>)
 8000df4:	f001 feee 	bl	8002bd4 <HAL_GPIO_WritePin>
	//odblokowanei zegara
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <displayWrite+0x3c>)
 8000dfe:	f001 fee9 	bl	8002bd4 <HAL_GPIO_WritePin>
	//transmisja danych
	HAL_SPI_Transmit(&hspi3,&data,1,100);
 8000e02:	1df9      	adds	r1, r7, #7
 8000e04:	2364      	movs	r3, #100	; 0x64
 8000e06:	2201      	movs	r2, #1
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <displayWrite+0x40>)
 8000e0a:	f003 fb97 	bl	800453c <HAL_SPI_Transmit>
	//blokada zegara
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2140      	movs	r1, #64	; 0x40
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <displayWrite+0x3c>)
 8000e14:	f001 fede 	bl	8002bd4 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020400 	.word	0x40020400
 8000e24:	200000d4 	.word	0x200000d4

08000e28 <displayInit>:

void displayInit(void){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	
	//reset resjtrow wyswietlacza
	displayReset();
 8000e2e:	f7ff ffa3 	bl	8000d78 <displayReset>
	
  //przejscie w tryb polecen rozszerzonych
  // 0x21 - polecenie
  displayCmd(0x21);
 8000e32:	2021      	movs	r0, #33	; 0x21
 8000e34:	f7ff ffb4 	bl	8000da0 <displayCmd>
 
  // Temperature Coefficient
  // 0x04 - polecenie | 0x0c - wartosc
  displayCmd(0x03);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f7ff ffb1 	bl	8000da0 <displayCmd>
	
	// Bias System
  // 0x10 - polecenie | 0x04 - wartosc (1/24)
	displayCmd(0x10 | 0x04);
 8000e3e:	2014      	movs	r0, #20
 8000e40:	f7ff ffae 	bl	8000da0 <displayCmd>
 
	//ustawienie kontrastu
  // 0x80 - polecenie | 0x38 - wartosc
  displayCmd(0x80 | 0x38);
 8000e44:	20b8      	movs	r0, #184	; 0xb8
 8000e46:	f7ff ffab 	bl	8000da0 <displayCmd>
	
  //powrot do trybu polecen podstawowych
  displayCmd(0x20);
 8000e4a:	2020      	movs	r0, #32
 8000e4c:	f7ff ffa8 	bl	8000da0 <displayCmd>
 
  // Ustawienie trybu pracy wytwietlacza - normalnego
	// 0x08 - polecenie | 0x04 - wartosc
  displayCmd(0x08 | 0x04);
 8000e50:	200c      	movs	r0, #12
 8000e52:	f7ff ffa5 	bl	8000da0 <displayCmd>
	
	//czyszczenie ekrenu
  for(int i = 0; i < 504; i++){
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	e005      	b.n	8000e68 <displayInit+0x40>
     displayWrite(0x00);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff ffc1 	bl	8000de4 <displayWrite>
  for(int i = 0; i < 504; i++){
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3301      	adds	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000e6e:	dbf5      	blt.n	8000e5c <displayInit+0x34>
	}
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <displaySetCursor>:


void displaySetCursor(uint8_t x, uint8_t y){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
		if((x > 83 || y > 5)){return;}
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b53      	cmp	r3, #83	; 0x53
 8000e8c:	d812      	bhi.n	8000eb4 <displaySetCursor+0x3c>
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d80f      	bhi.n	8000eb4 <displaySetCursor+0x3c>
		if((x < 0 || y < 0)){return;}
		//ustaweinie pozycji y
		displayCmd(0x40 | y);
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff7f 	bl	8000da0 <displayCmd>
		//ustawienie pozycji x
		displayCmd(0x80 | x);
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff78 	bl	8000da0 <displayCmd>
		return;
 8000eb0:	bf00      	nop
 8000eb2:	e000      	b.n	8000eb6 <displaySetCursor+0x3e>
		if((x > 83 || y > 5)){return;}
 8000eb4:	bf00      	nop
}
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <displayClear>:
void displayClear(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	displaySetCursor(0, 0);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff ffd7 	bl	8000e78 <displaySetCursor>
	for(int i = 0; i < 504; i++){
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	e005      	b.n	8000edc <displayClear+0x20>
	     displayWrite(0x00);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff ff87 	bl	8000de4 <displayWrite>
	for(int i = 0; i < 504; i++){
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000ee2:	dbf5      	blt.n	8000ed0 <displayClear+0x14>
	}
	return;
 8000ee4:	bf00      	nop
}
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <displayPrint>:
		displayWrite(0x00);
	}
	displaySetCursor(x,y);
}

void displayPrint(char* sign){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
		for(uint8_t i = 0; ;++i){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
			int pos = ((int) sign[i] ) - 32;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3b20      	subs	r3, #32
 8000f02:	60bb      	str	r3, [r7, #8]
			printInt(pos);
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f001 f8af 	bl	8002068 <printInt>
			if(sign[i] == '\0') break;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d039      	beq.n	8000f8a <displayPrint+0x9e>

			displayWrite(font_ASCII[pos][0]);
 8000f16:	491f      	ldr	r1, [pc, #124]	; (8000f94 <displayPrint+0xa8>)
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <displayWrite>
			displayWrite(font_ASCII[pos][1]);
 8000f2a:	491a      	ldr	r1, [pc, #104]	; (8000f94 <displayPrint+0xa8>)
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	3301      	adds	r3, #1
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff52 	bl	8000de4 <displayWrite>
			displayWrite(font_ASCII[pos][2]);
 8000f40:	4914      	ldr	r1, [pc, #80]	; (8000f94 <displayPrint+0xa8>)
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff47 	bl	8000de4 <displayWrite>
			displayWrite(font_ASCII[pos][3]);
 8000f56:	490f      	ldr	r1, [pc, #60]	; (8000f94 <displayPrint+0xa8>)
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	3303      	adds	r3, #3
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff3c 	bl	8000de4 <displayWrite>
			displayWrite(font_ASCII[pos][4]);
 8000f6c:	4909      	ldr	r1, [pc, #36]	; (8000f94 <displayPrint+0xa8>)
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	3304      	adds	r3, #4
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff31 	bl	8000de4 <displayWrite>
		for(uint8_t i = 0; ;++i){
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	3301      	adds	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e7b6      	b.n	8000ef8 <displayPrint+0xc>
			if(sign[i] == '\0') break;
 8000f8a:	bf00      	nop
		}
} 
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08005350 	.word	0x08005350

08000f98 <displayFloat>:
	//narysowanie pixela
	if( value == 1 ){ displayWrite((0x80 >> (y % 8))); }
	if( value == 0 ){ displayWrite((0x00)); }
}

void displayFloat(float number){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a01 	vstr	s0, [r7, #4]
	char numb[] ={'0', '0', '0', '0', '0', '0'};
 8000fa2:	4a7e      	ldr	r2, [pc, #504]	; (800119c <displayFloat+0x204>)
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fac:	6018      	str	r0, [r3, #0]
 8000fae:	3304      	adds	r3, #4
 8000fb0:	8019      	strh	r1, [r3, #0]
	if(number < 0) {number*=-1; displayPrint("-");}
 8000fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d509      	bpl.n	8000fd4 <displayFloat+0x3c>
 8000fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc4:	eef1 7a67 	vneg.f32	s15, s15
 8000fc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fcc:	4874      	ldr	r0, [pc, #464]	; (80011a0 <displayFloat+0x208>)
 8000fce:	f7ff ff8d 	bl	8000eec <displayPrint>
 8000fd2:	e002      	b.n	8000fda <displayFloat+0x42>
	else{displayPrint(" ");}
 8000fd4:	4873      	ldr	r0, [pc, #460]	; (80011a4 <displayFloat+0x20c>)
 8000fd6:	f7ff ff89 	bl	8000eec <displayPrint>
	if(number >= 10){
 8000fda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fde:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fea:	db73      	blt.n	80010d4 <displayFloat+0x13c>
			numb[0] = intToChar(( ((int)number) / 10 ) % 10 );
 8000fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff4:	ee17 1a90 	vmov	r1, s15
 8000ff8:	4b6b      	ldr	r3, [pc, #428]	; (80011a8 <displayFloat+0x210>)
 8000ffa:	fb83 2301 	smull	r2, r3, r3, r1
 8000ffe:	109a      	asrs	r2, r3, #2
 8001000:	17cb      	asrs	r3, r1, #31
 8001002:	1ad2      	subs	r2, r2, r3
 8001004:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <displayFloat+0x210>)
 8001006:	fb83 1302 	smull	r1, r3, r3, r2
 800100a:	1099      	asrs	r1, r3, #2
 800100c:	17d3      	asrs	r3, r2, #31
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	460b      	mov	r3, r1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	1ad1      	subs	r1, r2, r3
 800101a:	4608      	mov	r0, r1
 800101c:	f7ff fe72 	bl	8000d04 <intToChar>
 8001020:	4603      	mov	r3, r0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	723b      	strb	r3, [r7, #8]
			numb[1] = intToChar(( ((int)number) % 10 ));
 8001026:	edd7 7a01 	vldr	s15, [r7, #4]
 800102a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102e:	ee17 1a90 	vmov	r1, s15
 8001032:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <displayFloat+0x210>)
 8001034:	fb83 2301 	smull	r2, r3, r3, r1
 8001038:	109a      	asrs	r2, r3, #2
 800103a:	17cb      	asrs	r3, r1, #31
 800103c:	1ad2      	subs	r2, r2, r3
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	1aca      	subs	r2, r1, r3
 8001048:	4610      	mov	r0, r2
 800104a:	f7ff fe5b 	bl	8000d04 <intToChar>
 800104e:	4603      	mov	r3, r0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	727b      	strb	r3, [r7, #9]
			numb[2] = '.';
 8001054:	232e      	movs	r3, #46	; 0x2e
 8001056:	72bb      	strb	r3, [r7, #10]
			numb[3] = intToChar( ((int)(number * 10)) % 10 );
 8001058:	edd7 7a01 	vldr	s15, [r7, #4]
 800105c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001068:	ee17 1a90 	vmov	r1, s15
 800106c:	4b4e      	ldr	r3, [pc, #312]	; (80011a8 <displayFloat+0x210>)
 800106e:	fb83 2301 	smull	r2, r3, r3, r1
 8001072:	109a      	asrs	r2, r3, #2
 8001074:	17cb      	asrs	r3, r1, #31
 8001076:	1ad2      	subs	r2, r2, r3
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	1aca      	subs	r2, r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f7ff fe3e 	bl	8000d04 <intToChar>
 8001088:	4603      	mov	r3, r0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	72fb      	strb	r3, [r7, #11]
			numb[4] = intToChar( ((int)(number * 100)) % 10 );
 800108e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001092:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80011ac <displayFloat+0x214>
 8001096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109e:	ee17 1a90 	vmov	r1, s15
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <displayFloat+0x210>)
 80010a4:	fb83 2301 	smull	r2, r3, r3, r1
 80010a8:	109a      	asrs	r2, r3, #2
 80010aa:	17cb      	asrs	r3, r1, #31
 80010ac:	1ad2      	subs	r2, r2, r3
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	1aca      	subs	r2, r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f7ff fe23 	bl	8000d04 <intToChar>
 80010be:	4603      	mov	r3, r0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	733b      	strb	r3, [r7, #12]
			numb[5] = '\0';
 80010c4:	2300      	movs	r3, #0
 80010c6:	737b      	strb	r3, [r7, #13]
			displayPrint(numb);
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff0d 	bl	8000eec <displayPrint>
			return;
 80010d2:	e05f      	b.n	8001194 <displayFloat+0x1fc>
	}
	if(number <= 10){
 80010d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d856      	bhi.n	8001194 <displayFloat+0x1fc>
			numb[0] = intToChar(( ((int)number) % 10 ));
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ee:	ee17 1a90 	vmov	r1, s15
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <displayFloat+0x210>)
 80010f4:	fb83 2301 	smull	r2, r3, r3, r1
 80010f8:	109a      	asrs	r2, r3, #2
 80010fa:	17cb      	asrs	r3, r1, #31
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	1aca      	subs	r2, r1, r3
 8001108:	4610      	mov	r0, r2
 800110a:	f7ff fdfb 	bl	8000d04 <intToChar>
 800110e:	4603      	mov	r3, r0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	723b      	strb	r3, [r7, #8]
			numb[1] = '.';
 8001114:	232e      	movs	r3, #46	; 0x2e
 8001116:	727b      	strb	r3, [r7, #9]
			numb[2] = intToChar( ((int)(number * 10)) % 10);
 8001118:	edd7 7a01 	vldr	s15, [r7, #4]
 800111c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001128:	ee17 1a90 	vmov	r1, s15
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <displayFloat+0x210>)
 800112e:	fb83 2301 	smull	r2, r3, r3, r1
 8001132:	109a      	asrs	r2, r3, #2
 8001134:	17cb      	asrs	r3, r1, #31
 8001136:	1ad2      	subs	r2, r2, r3
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	1aca      	subs	r2, r1, r3
 8001142:	4610      	mov	r0, r2
 8001144:	f7ff fdde 	bl	8000d04 <intToChar>
 8001148:	4603      	mov	r3, r0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	72bb      	strb	r3, [r7, #10]
			numb[3] = intToChar(( ((int)(number * 100)) % 10));
 800114e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001152:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80011ac <displayFloat+0x214>
 8001156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115e:	ee17 1a90 	vmov	r1, s15
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <displayFloat+0x210>)
 8001164:	fb83 2301 	smull	r2, r3, r3, r1
 8001168:	109a      	asrs	r2, r3, #2
 800116a:	17cb      	asrs	r3, r1, #31
 800116c:	1ad2      	subs	r2, r2, r3
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	1aca      	subs	r2, r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f7ff fdc3 	bl	8000d04 <intToChar>
 800117e:	4603      	mov	r3, r0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	72fb      	strb	r3, [r7, #11]
			numb[4] = '\0';
 8001184:	2300      	movs	r3, #0
 8001186:	733b      	strb	r3, [r7, #12]
			displayPrint(numb);
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fead 	bl	8000eec <displayPrint>
			return;
 8001192:	bf00      	nop
	}
}
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	08005108 	.word	0x08005108
 80011a0:	08005100 	.word	0x08005100
 80011a4:	08005104 	.word	0x08005104
 80011a8:	66666667 	.word	0x66666667
 80011ac:	42c80000 	.word	0x42c80000

080011b0 <displayDrawLevel>:

void displayDrawLevel(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
	displaySetCursor(0,0);
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fe5d 	bl	8000e78 <displaySetCursor>
	for(uint16_t i = 0; i < 504; ++i){
 80011be:	2300      	movs	r3, #0
 80011c0:	80fb      	strh	r3, [r7, #6]
 80011c2:	e008      	b.n	80011d6 <displayDrawLevel+0x26>
		displayWrite(labirynth[i]);
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <displayDrawLevel+0x38>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe0a 	bl	8000de4 <displayWrite>
	for(uint16_t i = 0; i < 504; ++i){
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	3301      	adds	r3, #1
 80011d4:	80fb      	strh	r3, [r7, #6]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80011dc:	d3f2      	bcc.n	80011c4 <displayDrawLevel+0x14>
	}
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	08005154 	.word	0x08005154

080011ec <i2cWrite>:
static void MX_UART4_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */


void i2cWrite(uint8_t reg, uint8_t data){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, ACC_SLAVE_ADDR, reg, 1, &data, 1, 100);;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	2364      	movs	r3, #100	; 0x64
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2301      	movs	r3, #1
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	1dbb      	adds	r3, r7, #6
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	213a      	movs	r1, #58	; 0x3a
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <i2cWrite+0x34>)
 8001212:	f001 fe55 	bl	8002ec0 <HAL_I2C_Mem_Write>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000080 	.word	0x20000080

08001224 <i2cRead>:

uint8_t i2cRead(uint8_t reg){
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af04      	add	r7, sp, #16
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c2, ACC_SLAVE_ADDR, reg, 1, &data, 1, 100);;
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	b29a      	uxth	r2, r3
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2301      	movs	r3, #1
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f107 030f 	add.w	r3, r7, #15
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	213a      	movs	r1, #58	; 0x3a
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <i2cRead+0x30>)
 8001246:	f001 ff35 	bl	80030b4 <HAL_I2C_Mem_Read>
	return data;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000080 	.word	0x20000080

08001258 <odczytX>:


float odczytX(void)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0

	int16_t axis = (i2cRead(OUT_X_H) << 8) | i2cRead(OUT_X_L);
 800125e:	2029      	movs	r0, #41	; 0x29
 8001260:	f7ff ffe0 	bl	8001224 <i2cRead>
 8001264:	4603      	mov	r3, r0
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21c      	sxth	r4, r3
 800126a:	2028      	movs	r0, #40	; 0x28
 800126c:	f7ff ffda 	bl	8001224 <i2cRead>
 8001270:	4603      	mov	r3, r0
 8001272:	b21b      	sxth	r3, r3
 8001274:	4323      	orrs	r3, r4
 8001276:	80fb      	strh	r3, [r7, #6]
	return (axis * ACC_RESOLUTION)/(float)(32767);
 8001278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001286:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800129c <odczytX+0x44>
 800128a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800128e:	eef0 7a66 	vmov.f32	s15, s13

}
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}
 800129c:	46fffe00 	.word	0x46fffe00

080012a0 <odczytY>:

float odczytY(void)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
	int16_t axis = (i2cRead(OUT_Y_H) << 8) | i2cRead(OUT_Y_L);
 80012a6:	202b      	movs	r0, #43	; 0x2b
 80012a8:	f7ff ffbc 	bl	8001224 <i2cRead>
 80012ac:	4603      	mov	r3, r0
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21c      	sxth	r4, r3
 80012b2:	202a      	movs	r0, #42	; 0x2a
 80012b4:	f7ff ffb6 	bl	8001224 <i2cRead>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4323      	orrs	r3, r4
 80012be:	80fb      	strh	r3, [r7, #6]
	return (axis * ACC_RESOLUTION)/(float)(32767);
 80012c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80012e4 <odczytY+0x44>
 80012d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012d6:	eef0 7a66 	vmov.f32	s15, s13
	}
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	46fffe00 	.word	0x46fffe00

080012e8 <ball>:

}



void ball(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

	int8_t x_pos=4, y_pos=4, cursorY;		//Zmienne pozycyjne
 80012ee:	2304      	movs	r3, #4
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	2304      	movs	r3, #4
 80012f4:	71bb      	strb	r3, [r7, #6]

	displayCmd(0x0d);
 80012f6:	200d      	movs	r0, #13
 80012f8:	f7ff fd52 	bl	8000da0 <displayCmd>

 	displayDrawLevel();
 80012fc:	f7ff ff58 	bl	80011b0 <displayDrawLevel>

  while(1){

	cursorY =  (5 - (y_pos / 8));
 8001300:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001304:	2b00      	cmp	r3, #0
 8001306:	da00      	bge.n	800130a <ball+0x22>
 8001308:	3307      	adds	r3, #7
 800130a:	10db      	asrs	r3, r3, #3
 800130c:	b25b      	sxtb	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f1c3 0305 	rsb	r3, r3, #5
 8001314:	b2db      	uxtb	r3, r3
 8001316:	70fb      	strb	r3, [r7, #3]
	//ustawienie kursora w odpowiednim miejscu
	displaySetCursor(x_pos,cursorY);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	78fa      	ldrb	r2, [r7, #3]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fdaa 	bl	8000e78 <displaySetCursor>
	//usuniecie pixela
	displayWrite(labirynth[cursorY * 84 + x_pos]);
 8001324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001328:	2254      	movs	r2, #84	; 0x54
 800132a:	fb02 f203 	mul.w	r2, r2, r3
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	4413      	add	r3, r2
 8001334:	4ab7      	ldr	r2, [pc, #732]	; (8001614 <ball+0x32c>)
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fd53 	bl	8000de4 <displayWrite>

    acc.x = odczytX();
 800133e:	f7ff ff8b 	bl	8001258 <odczytX>
 8001342:	eef0 7a40 	vmov.f32	s15, s0
 8001346:	4bb4      	ldr	r3, [pc, #720]	; (8001618 <ball+0x330>)
 8001348:	edc3 7a00 	vstr	s15, [r3]
    acc.y = odczytY();
 800134c:	f7ff ffa8 	bl	80012a0 <odczytY>
 8001350:	eef0 7a40 	vmov.f32	s15, s0
 8001354:	4bb0      	ldr	r3, [pc, #704]	; (8001618 <ball+0x330>)
 8001356:	edc3 7a01 	vstr	s15, [r3, #4]

    if(acc.y < -0.5){
 800135a:	4baf      	ldr	r3, [pc, #700]	; (8001618 <ball+0x330>)
 800135c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001360:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136c:	d504      	bpl.n	8001378 <ball+0x90>
    	x_pos += 1;
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	3301      	adds	r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	e00d      	b.n	8001394 <ball+0xac>
    }else if(acc.y > 0.5){
 8001378:	4ba7      	ldr	r3, [pc, #668]	; (8001618 <ball+0x330>)
 800137a:	edd3 7a01 	vldr	s15, [r3, #4]
 800137e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	dd03      	ble.n	8001394 <ball+0xac>
    	x_pos -= 1;
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	3b01      	subs	r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	71fb      	strb	r3, [r7, #7]
    }

    if(acc.x > 0.5){
 8001394:	4ba0      	ldr	r3, [pc, #640]	; (8001618 <ball+0x330>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800139e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	dd04      	ble.n	80013b2 <ball+0xca>
    	y_pos += 1;
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	71bb      	strb	r3, [r7, #6]
 80013b0:	e00d      	b.n	80013ce <ball+0xe6>
    }else if(acc.x < -0.5){
 80013b2:	4b99      	ldr	r3, [pc, #612]	; (8001618 <ball+0x330>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	d503      	bpl.n	80013ce <ball+0xe6>
    	y_pos -= 1;
 80013c6:	79bb      	ldrb	r3, [r7, #6]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	71bb      	strb	r3, [r7, #6]
    }

	uint16_t i = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	80bb      	strh	r3, [r7, #4]


	while(1)
	{

		if((x_pos < walls[i].x1 || x_pos > walls[i].x2)){ ++i; continue; }
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	88ba      	ldrh	r2, [r7, #4]
 80013d8:	4990      	ldr	r1, [pc, #576]	; (800161c <ball+0x334>)
 80013da:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 80013de:	4293      	cmp	r3, r2
 80013e0:	db08      	blt.n	80013f4 <ball+0x10c>
 80013e2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	498c      	ldr	r1, [pc, #560]	; (800161c <ball+0x334>)
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dd03      	ble.n	80013fc <ball+0x114>
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	3301      	adds	r3, #1
 80013f8:	80bb      	strh	r3, [r7, #4]
 80013fa:	e10a      	b.n	8001612 <ball+0x32a>

		if((y_pos < walls[i].y1 || y_pos > walls[i].y2)){ ++i; continue; }
 80013fc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	4986      	ldr	r1, [pc, #536]	; (800161c <ball+0x334>)
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	789b      	ldrb	r3, [r3, #2]
 800140a:	429a      	cmp	r2, r3
 800140c:	db08      	blt.n	8001420 <ball+0x138>
 800140e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	4981      	ldr	r1, [pc, #516]	; (800161c <ball+0x334>)
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	429a      	cmp	r2, r3
 800141e:	dd03      	ble.n	8001428 <ball+0x140>
 8001420:	88bb      	ldrh	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	80bb      	strh	r3, [r7, #4]
 8001426:	e0f4      	b.n	8001612 <ball+0x32a>


		if(x_pos >= walls[i].x1 && x_pos <= walls[i].x2){
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	88ba      	ldrh	r2, [r7, #4]
 800142e:	497b      	ldr	r1, [pc, #492]	; (800161c <ball+0x334>)
 8001430:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8001434:	4293      	cmp	r3, r2
 8001436:	db63      	blt.n	8001500 <ball+0x218>
 8001438:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	4977      	ldr	r1, [pc, #476]	; (800161c <ball+0x334>)
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	429a      	cmp	r2, r3
 8001448:	dc5a      	bgt.n	8001500 <ball+0x218>

			if(x_pos == walls[i].x1 && x_pos == walls[i].x2){
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	88ba      	ldrh	r2, [r7, #4]
 8001450:	4972      	ldr	r1, [pc, #456]	; (800161c <ball+0x334>)
 8001452:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8001456:	4293      	cmp	r3, r2
 8001458:	d124      	bne.n	80014a4 <ball+0x1bc>
 800145a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800145e:	88bb      	ldrh	r3, [r7, #4]
 8001460:	496e      	ldr	r1, [pc, #440]	; (800161c <ball+0x334>)
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	429a      	cmp	r2, r3
 800146a:	d11b      	bne.n	80014a4 <ball+0x1bc>
				if(acc.y < -0.5){  x_pos -= 1;}
 800146c:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <ball+0x330>)
 800146e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001472:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	d503      	bpl.n	8001488 <ball+0x1a0>
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	3b01      	subs	r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	71fb      	strb	r3, [r7, #7]
				if(acc.y >  0.5) { x_pos += 1;}
 8001488:	4b63      	ldr	r3, [pc, #396]	; (8001618 <ball+0x330>)
 800148a:	edd3 7a01 	vldr	s15, [r3, #4]
 800148e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	dd03      	ble.n	80014a4 <ball+0x1bc>
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	3301      	adds	r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	71fb      	strb	r3, [r7, #7]
			}

			if(y_pos == walls[i].y1 && y_pos == walls[i].y2){
 80014a4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	495c      	ldr	r1, [pc, #368]	; (800161c <ball+0x334>)
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	789b      	ldrb	r3, [r3, #2]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d124      	bne.n	8001500 <ball+0x218>
 80014b6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	4957      	ldr	r1, [pc, #348]	; (800161c <ball+0x334>)
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	78db      	ldrb	r3, [r3, #3]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d11b      	bne.n	8001500 <ball+0x218>
				if(acc.x >  0.5){  y_pos -= 1;}
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <ball+0x330>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	dd03      	ble.n	80014e4 <ball+0x1fc>
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	3b01      	subs	r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	71bb      	strb	r3, [r7, #6]
				if(acc.x < -0.5){  y_pos += 1;}
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <ball+0x330>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d503      	bpl.n	8001500 <ball+0x218>
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	3301      	adds	r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	71bb      	strb	r3, [r7, #6]
			}
		}

		if(y_pos >= walls[i].x1 && y_pos <= walls[i].x1){
 8001500:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001504:	88ba      	ldrh	r2, [r7, #4]
 8001506:	4945      	ldr	r1, [pc, #276]	; (800161c <ball+0x334>)
 8001508:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 800150c:	4293      	cmp	r3, r2
 800150e:	db62      	blt.n	80015d6 <ball+0x2ee>
 8001510:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001514:	88ba      	ldrh	r2, [r7, #4]
 8001516:	4941      	ldr	r1, [pc, #260]	; (800161c <ball+0x334>)
 8001518:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 800151c:	4293      	cmp	r3, r2
 800151e:	dc5a      	bgt.n	80015d6 <ball+0x2ee>

			if(x_pos == walls[i].x1 && x_pos == walls[i].x2){
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	88ba      	ldrh	r2, [r7, #4]
 8001526:	493d      	ldr	r1, [pc, #244]	; (800161c <ball+0x334>)
 8001528:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 800152c:	4293      	cmp	r3, r2
 800152e:	d124      	bne.n	800157a <ball+0x292>
 8001530:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001534:	88bb      	ldrh	r3, [r7, #4]
 8001536:	4939      	ldr	r1, [pc, #228]	; (800161c <ball+0x334>)
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	429a      	cmp	r2, r3
 8001540:	d11b      	bne.n	800157a <ball+0x292>
				if(acc.y < -0.5){  x_pos -= 1;}
 8001542:	4b35      	ldr	r3, [pc, #212]	; (8001618 <ball+0x330>)
 8001544:	edd3 7a01 	vldr	s15, [r3, #4]
 8001548:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	d503      	bpl.n	800155e <ball+0x276>
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3b01      	subs	r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	71fb      	strb	r3, [r7, #7]
				if(acc.y >  0.5) { x_pos += 1;}
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <ball+0x330>)
 8001560:	edd3 7a01 	vldr	s15, [r3, #4]
 8001564:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001570:	dd03      	ble.n	800157a <ball+0x292>
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	3301      	adds	r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	71fb      	strb	r3, [r7, #7]
			}

			if(y_pos == walls[i].y1 && y_pos == walls[i].y2){
 800157a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	4926      	ldr	r1, [pc, #152]	; (800161c <ball+0x334>)
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	429a      	cmp	r2, r3
 800158a:	d124      	bne.n	80015d6 <ball+0x2ee>
 800158c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	4922      	ldr	r1, [pc, #136]	; (800161c <ball+0x334>)
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	78db      	ldrb	r3, [r3, #3]
 800159a:	429a      	cmp	r2, r3
 800159c:	d11b      	bne.n	80015d6 <ball+0x2ee>
			if(acc.x >  0.5){  y_pos -= 1;}
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <ball+0x330>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	dd03      	ble.n	80015ba <ball+0x2d2>
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	71bb      	strb	r3, [r7, #6]
			if(acc.x < -0.5){  y_pos += 1;}
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <ball+0x330>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80015c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	d503      	bpl.n	80015d6 <ball+0x2ee>
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	3301      	adds	r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	71bb      	strb	r3, [r7, #6]
			}
		}

	    //Uwzglednienie odbijania sie od scianek
	    if(x_pos < min_pos_x){	//Osiagnieto pierwsza pozycje skrajna
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da01      	bge.n	80015e2 <ball+0x2fa>
	      x_pos = min_pos_x + 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	71fb      	strb	r3, [r7, #7]

	    }
	    if(x_pos > max_pos_x){	//Osiagnieto druga pozycje skrajna
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b53      	cmp	r3, #83	; 0x53
 80015e8:	dd01      	ble.n	80015ee <ball+0x306>
	      x_pos = max_pos_x;
 80015ea:	2353      	movs	r3, #83	; 0x53
 80015ec:	71fb      	strb	r3, [r7, #7]

	    }
	    if(y_pos < min_pos_y){
 80015ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da01      	bge.n	80015fa <ball+0x312>
	      y_pos = min_pos_y + 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	71bb      	strb	r3, [r7, #6]

	    }
	    if(y_pos > max_pos_y){
 80015fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015fe:	2b2f      	cmp	r3, #47	; 0x2f
 8001600:	dd01      	ble.n	8001606 <ball+0x31e>
	      y_pos = max_pos_y;
 8001602:	232f      	movs	r3, #47	; 0x2f
 8001604:	71bb      	strb	r3, [r7, #6]
	    }

		++i;
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	3301      	adds	r3, #1
 800160a:	80bb      	strh	r3, [r7, #4]
		if(i > sizeof(walls)/sizeof(struct constrains)) break;
 800160c:	88bb      	ldrh	r3, [r7, #4]
 800160e:	2b12      	cmp	r3, #18
 8001610:	d806      	bhi.n	8001620 <ball+0x338>
		if((x_pos < walls[i].x1 || x_pos > walls[i].x2)){ ++i; continue; }
 8001612:	e6de      	b.n	80013d2 <ball+0xea>
 8001614:	08005154 	.word	0x08005154
 8001618:	20000074 	.word	0x20000074
 800161c:	20000004 	.word	0x20000004
		if(i > sizeof(walls)/sizeof(struct constrains)) break;
 8001620:	bf00      	nop
	}

	//obliczanie rejstru Y
	cursorY = 5 - (y_pos / 8);
 8001622:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001626:	2b00      	cmp	r3, #0
 8001628:	da00      	bge.n	800162c <ball+0x344>
 800162a:	3307      	adds	r3, #7
 800162c:	10db      	asrs	r3, r3, #3
 800162e:	b25b      	sxtb	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f1c3 0305 	rsb	r3, r3, #5
 8001636:	b2db      	uxtb	r3, r3
 8001638:	70fb      	strb	r3, [r7, #3]
	//ustawienie kursora w odpowiednim miejsu
	displaySetCursor(x_pos,cursorY);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fc19 	bl	8000e78 <displaySetCursor>
	//narysowanie pixela
	displayWrite((0x80 >> (y_pos % 8)) | labirynth[cursorY * 84 + x_pos]);
 8001646:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800164a:	425a      	negs	r2, r3
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	f002 0207 	and.w	r2, r2, #7
 8001654:	bf58      	it	pl
 8001656:	4253      	negpl	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	4113      	asrs	r3, r2
 8001660:	b25a      	sxtb	r2, r3
 8001662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001666:	2154      	movs	r1, #84	; 0x54
 8001668:	fb01 f103 	mul.w	r1, r1, r3
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	440b      	add	r3, r1
 8001672:	492e      	ldr	r1, [pc, #184]	; (800172c <ball+0x444>)
 8001674:	5ccb      	ldrb	r3, [r1, r3]
 8001676:	b25b      	sxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fbb0 	bl	8000de4 <displayWrite>

	if( (y_pos == 46 || y_pos == 45 || y_pos == 44 || y_pos == 43 || y_pos == 42) && ( x_pos == 76 || x_pos == 77 || x_pos == 78 || x_pos == 79 || x_pos == 80 || x_pos == 81 || x_pos == 82)){
 8001684:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001688:	2b2e      	cmp	r3, #46	; 0x2e
 800168a:	d00f      	beq.n	80016ac <ball+0x3c4>
 800168c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001690:	2b2d      	cmp	r3, #45	; 0x2d
 8001692:	d00b      	beq.n	80016ac <ball+0x3c4>
 8001694:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001698:	2b2c      	cmp	r3, #44	; 0x2c
 800169a:	d007      	beq.n	80016ac <ball+0x3c4>
 800169c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016a0:	2b2b      	cmp	r3, #43	; 0x2b
 80016a2:	d003      	beq.n	80016ac <ball+0x3c4>
 80016a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016a8:	2b2a      	cmp	r3, #42	; 0x2a
 80016aa:	d130      	bne.n	800170e <ball+0x426>
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b4c      	cmp	r3, #76	; 0x4c
 80016b2:	d017      	beq.n	80016e4 <ball+0x3fc>
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b4d      	cmp	r3, #77	; 0x4d
 80016ba:	d013      	beq.n	80016e4 <ball+0x3fc>
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b4e      	cmp	r3, #78	; 0x4e
 80016c2:	d00f      	beq.n	80016e4 <ball+0x3fc>
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b4f      	cmp	r3, #79	; 0x4f
 80016ca:	d00b      	beq.n	80016e4 <ball+0x3fc>
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b50      	cmp	r3, #80	; 0x50
 80016d2:	d007      	beq.n	80016e4 <ball+0x3fc>
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b51      	cmp	r3, #81	; 0x51
 80016da:	d003      	beq.n	80016e4 <ball+0x3fc>
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b52      	cmp	r3, #82	; 0x52
 80016e2:	d114      	bne.n	800170e <ball+0x426>
		displayClear();
 80016e4:	f7ff fbea 	bl	8000ebc <displayClear>
		displaySetCursor(18,3);
 80016e8:	2103      	movs	r1, #3
 80016ea:	2012      	movs	r0, #18
 80016ec:	f7ff fbc4 	bl	8000e78 <displaySetCursor>
		displayPrint("You Won!!!");
 80016f0:	480f      	ldr	r0, [pc, #60]	; (8001730 <ball+0x448>)
 80016f2:	f7ff fbfb 	bl	8000eec <displayPrint>
		HAL_Delay(2000);
 80016f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016fa:	f000 ff71 	bl	80025e0 <HAL_Delay>
		displayClear();
 80016fe:	f7ff fbdd 	bl	8000ebc <displayClear>
		x_pos = 4; y_pos = 4;
 8001702:	2304      	movs	r3, #4
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	2304      	movs	r3, #4
 8001708:	71bb      	strb	r3, [r7, #6]
		displayDrawLevel();
 800170a:	f7ff fd51 	bl	80011b0 <displayDrawLevel>
	}
    HAL_Delay(150);	//Ustawienie okresu aktualizacji pomiaru/obrazu
 800170e:	2096      	movs	r0, #150	; 0x96
 8001710:	f000 ff66 	bl	80025e0 <HAL_Delay>
    if(mode != 2){
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <ball+0x44c>)
 8001716:	f993 3000 	ldrsb.w	r3, [r3]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d100      	bne.n	8001720 <ball+0x438>
  while(1){
 800171e:	e5ef      	b.n	8001300 <ball+0x18>
    	break;
 8001720:	bf00      	nop
    }

  }
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	08005154 	.word	0x08005154
 8001730:	08005110 	.word	0x08005110
 8001734:	20000000 	.word	0x20000000

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173e:	f000 fedd 	bl	80024fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001742:	f000 f925 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001746:	f000 fa1d 	bl	8001b84 <MX_GPIO_Init>
  MX_SPI3_Init();
 800174a:	f000 f9b9 	bl	8001ac0 <MX_SPI3_Init>
  MX_UART4_Init();
 800174e:	f000 f9ef 	bl	8001b30 <MX_UART4_Init>
  MX_I2C2_Init();
 8001752:	f000 f987 	bl	8001a64 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data = 0x57;
 8001756:	2357      	movs	r3, #87	; 0x57
 8001758:	71fb      	strb	r3, [r7, #7]
  int16_t axis;
  displayInit();
 800175a:	f7ff fb65 	bl	8000e28 <displayInit>

  i2cWrite(0x20, data);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4619      	mov	r1, r3
 8001762:	2020      	movs	r0, #32
 8001764:	f7ff fd42 	bl	80011ec <i2cWrite>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		axis = (i2cRead(OUT_X_H) << 8) | i2cRead(OUT_X_L);
 8001768:	2029      	movs	r0, #41	; 0x29
 800176a:	f7ff fd5b 	bl	8001224 <i2cRead>
 800176e:	4603      	mov	r3, r0
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21c      	sxth	r4, r3
 8001774:	2028      	movs	r0, #40	; 0x28
 8001776:	f7ff fd55 	bl	8001224 <i2cRead>
 800177a:	4603      	mov	r3, r0
 800177c:	b21b      	sxth	r3, r3
 800177e:	4323      	orrs	r3, r4
 8001780:	80bb      	strh	r3, [r7, #4]
		acc.x = (axis * ACC_RESOLUTION)/(float)(32767);
 8001782:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001790:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001970 <main+0x238>
 8001794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001798:	4b76      	ldr	r3, [pc, #472]	; (8001974 <main+0x23c>)
 800179a:	edc3 7a00 	vstr	s15, [r3]

		axis = (i2cRead(OUT_Y_H) << 8) | i2cRead(OUT_Y_L);
 800179e:	202b      	movs	r0, #43	; 0x2b
 80017a0:	f7ff fd40 	bl	8001224 <i2cRead>
 80017a4:	4603      	mov	r3, r0
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	b21c      	sxth	r4, r3
 80017aa:	202a      	movs	r0, #42	; 0x2a
 80017ac:	f7ff fd3a 	bl	8001224 <i2cRead>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	4323      	orrs	r3, r4
 80017b6:	80bb      	strh	r3, [r7, #4]
		acc.y = (axis * ACC_RESOLUTION)/(float)(32767);
 80017b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c6:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001970 <main+0x238>
 80017ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ce:	4b69      	ldr	r3, [pc, #420]	; (8001974 <main+0x23c>)
 80017d0:	edc3 7a01 	vstr	s15, [r3, #4]

		axis = (i2cRead(OUT_Z_H) << 8) | i2cRead(OUT_Z_L);
 80017d4:	202d      	movs	r0, #45	; 0x2d
 80017d6:	f7ff fd25 	bl	8001224 <i2cRead>
 80017da:	4603      	mov	r3, r0
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	b21c      	sxth	r4, r3
 80017e0:	202c      	movs	r0, #44	; 0x2c
 80017e2:	f7ff fd1f 	bl	8001224 <i2cRead>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4323      	orrs	r3, r4
 80017ec:	80bb      	strh	r3, [r7, #4]
		acc.z = (axis * ACC_RESOLUTION)/(float)(32767);
 80017ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017fc:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001970 <main+0x238>
 8001800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001804:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <main+0x23c>)
 8001806:	edc3 7a02 	vstr	s15, [r3, #8]

		if(mode == 0){
 800180a:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <main+0x240>)
 800180c:	f993 3000 	ldrsb.w	r3, [r3]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d141      	bne.n	8001898 <main+0x160>
			displaySetCursor(0,0);
 8001814:	2100      	movs	r1, #0
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fb2e 	bl	8000e78 <displaySetCursor>
			displayPrint("X =");
 800181c:	4857      	ldr	r0, [pc, #348]	; (800197c <main+0x244>)
 800181e:	f7ff fb65 	bl	8000eec <displayPrint>
			displaySetCursor(15,0);
 8001822:	2100      	movs	r1, #0
 8001824:	200f      	movs	r0, #15
 8001826:	f7ff fb27 	bl	8000e78 <displaySetCursor>
			displayFloat(acc.x);
 800182a:	4b52      	ldr	r3, [pc, #328]	; (8001974 <main+0x23c>)
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	eeb0 0a67 	vmov.f32	s0, s15
 8001834:	f7ff fbb0 	bl	8000f98 <displayFloat>
			displayPrint("g");
 8001838:	4851      	ldr	r0, [pc, #324]	; (8001980 <main+0x248>)
 800183a:	f7ff fb57 	bl	8000eec <displayPrint>


			displaySetCursor(0,2);
 800183e:	2102      	movs	r1, #2
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fb19 	bl	8000e78 <displaySetCursor>
			displayPrint("Y =");
 8001846:	484f      	ldr	r0, [pc, #316]	; (8001984 <main+0x24c>)
 8001848:	f7ff fb50 	bl	8000eec <displayPrint>
			displaySetCursor(15,2);
 800184c:	2102      	movs	r1, #2
 800184e:	200f      	movs	r0, #15
 8001850:	f7ff fb12 	bl	8000e78 <displaySetCursor>
			displayFloat(acc.y);
 8001854:	4b47      	ldr	r3, [pc, #284]	; (8001974 <main+0x23c>)
 8001856:	edd3 7a01 	vldr	s15, [r3, #4]
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	f7ff fb9b 	bl	8000f98 <displayFloat>
			displayPrint("g");
 8001862:	4847      	ldr	r0, [pc, #284]	; (8001980 <main+0x248>)
 8001864:	f7ff fb42 	bl	8000eec <displayPrint>


			displaySetCursor(0,4);
 8001868:	2104      	movs	r1, #4
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fb04 	bl	8000e78 <displaySetCursor>
			displayPrint("Z =");
 8001870:	4845      	ldr	r0, [pc, #276]	; (8001988 <main+0x250>)
 8001872:	f7ff fb3b 	bl	8000eec <displayPrint>
			displaySetCursor(15,4);
 8001876:	2104      	movs	r1, #4
 8001878:	200f      	movs	r0, #15
 800187a:	f7ff fafd 	bl	8000e78 <displaySetCursor>
			displayFloat(acc.z);
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <main+0x23c>)
 8001880:	edd3 7a02 	vldr	s15, [r3, #8]
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	f7ff fb86 	bl	8000f98 <displayFloat>
			displayPrint("g");
 800188c:	483c      	ldr	r0, [pc, #240]	; (8001980 <main+0x248>)
 800188e:	f7ff fb2d 	bl	8000eec <displayPrint>

			HAL_Delay(200);
 8001892:	20c8      	movs	r0, #200	; 0xc8
 8001894:	f000 fea4 	bl	80025e0 <HAL_Delay>
		}
		if(mode == 1){
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <main+0x240>)
 800189a:	f993 3000 	ldrsb.w	r3, [r3]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d156      	bne.n	8001950 <main+0x218>

			displaySetCursor(15,0);
 80018a2:	2100      	movs	r1, #0
 80018a4:	200f      	movs	r0, #15
 80018a6:	f7ff fae7 	bl	8000e78 <displaySetCursor>
			displayFloat(9.81 * acc.x);
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <main+0x23c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fdee 	bl	8000490 <__aeabi_f2d>
 80018b4:	a32c      	add	r3, pc, #176	; (adr r3, 8001968 <main+0x230>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fe41 	bl	8000540 <__aeabi_dmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	460c      	mov	r4, r1
 80018c2:	4618      	mov	r0, r3
 80018c4:	4621      	mov	r1, r4
 80018c6:	f7ff f84d 	bl	8000964 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	ee00 3a10 	vmov	s0, r3
 80018d0:	f7ff fb62 	bl	8000f98 <displayFloat>
			displayPrint(" m/s");
 80018d4:	482d      	ldr	r0, [pc, #180]	; (800198c <main+0x254>)
 80018d6:	f7ff fb09 	bl	8000eec <displayPrint>

			displaySetCursor(15,2);
 80018da:	2102      	movs	r1, #2
 80018dc:	200f      	movs	r0, #15
 80018de:	f7ff facb 	bl	8000e78 <displaySetCursor>
			displayFloat(9.81 * acc.y);
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <main+0x23c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fdd2 	bl	8000490 <__aeabi_f2d>
 80018ec:	a31e      	add	r3, pc, #120	; (adr r3, 8001968 <main+0x230>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe25 	bl	8000540 <__aeabi_dmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	460c      	mov	r4, r1
 80018fa:	4618      	mov	r0, r3
 80018fc:	4621      	mov	r1, r4
 80018fe:	f7ff f831 	bl	8000964 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	ee00 3a10 	vmov	s0, r3
 8001908:	f7ff fb46 	bl	8000f98 <displayFloat>
			displayPrint(" m/s");
 800190c:	481f      	ldr	r0, [pc, #124]	; (800198c <main+0x254>)
 800190e:	f7ff faed 	bl	8000eec <displayPrint>

			displaySetCursor(15,4);
 8001912:	2104      	movs	r1, #4
 8001914:	200f      	movs	r0, #15
 8001916:	f7ff faaf 	bl	8000e78 <displaySetCursor>
			displayFloat(9.81 * acc.z);
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <main+0x23c>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fdb6 	bl	8000490 <__aeabi_f2d>
 8001924:	a310      	add	r3, pc, #64	; (adr r3, 8001968 <main+0x230>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fe09 	bl	8000540 <__aeabi_dmul>
 800192e:	4603      	mov	r3, r0
 8001930:	460c      	mov	r4, r1
 8001932:	4618      	mov	r0, r3
 8001934:	4621      	mov	r1, r4
 8001936:	f7ff f815 	bl	8000964 <__aeabi_d2f>
 800193a:	4603      	mov	r3, r0
 800193c:	ee00 3a10 	vmov	s0, r3
 8001940:	f7ff fb2a 	bl	8000f98 <displayFloat>
			displayPrint(" m/s");
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <main+0x254>)
 8001946:	f7ff fad1 	bl	8000eec <displayPrint>

			HAL_Delay(200);
 800194a:	20c8      	movs	r0, #200	; 0xc8
 800194c:	f000 fe48 	bl	80025e0 <HAL_Delay>
		}
		if(mode == 2){
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <main+0x240>)
 8001952:	f993 3000 	ldrsb.w	r3, [r3]
 8001956:	2b02      	cmp	r3, #2
 8001958:	f47f af06 	bne.w	8001768 <main+0x30>

			ball();
 800195c:	f7ff fcc4 	bl	80012e8 <ball>
		axis = (i2cRead(OUT_X_H) << 8) | i2cRead(OUT_X_L);
 8001960:	e702      	b.n	8001768 <main+0x30>
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	51eb851f 	.word	0x51eb851f
 800196c:	40239eb8 	.word	0x40239eb8
 8001970:	46fffe00 	.word	0x46fffe00
 8001974:	20000074 	.word	0x20000074
 8001978:	20000000 	.word	0x20000000
 800197c:	0800511c 	.word	0x0800511c
 8001980:	08005120 	.word	0x08005120
 8001984:	08005124 	.word	0x08005124
 8001988:	08005128 	.word	0x08005128
 800198c:	0800512c 	.word	0x0800512c

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b094      	sub	sp, #80	; 0x50
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	2230      	movs	r2, #48	; 0x30
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fb9a 	bl	80050d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <SystemClock_Config+0xcc>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a27      	ldr	r2, [pc, #156]	; (8001a5c <SystemClock_Config+0xcc>)
 80019be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <SystemClock_Config+0xcc>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <SystemClock_Config+0xd0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <SystemClock_Config+0xd0>)
 80019da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <SystemClock_Config+0xd0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ec:	2301      	movs	r3, #1
 80019ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f6:	2302      	movs	r3, #2
 80019f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a00:	2308      	movs	r3, #8
 8001a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 f8ca 	bl	8003bb0 <HAL_RCC_OscConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a22:	f000 f95d 	bl	8001ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a26:	230f      	movs	r3, #15
 8001a28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2105      	movs	r1, #5
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 fb23 	bl	8004090 <HAL_RCC_ClockConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a50:	f000 f946 	bl	8001ce0 <Error_Handler>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3750      	adds	r7, #80	; 0x50
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000

08001a64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <MX_I2C2_Init+0x54>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <MX_I2C2_Init+0x58>)
 8001a72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001aa2:	f001 f8d5 	bl	8002c50 <HAL_I2C_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001aac:	f000 f918 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000080 	.word	0x20000080
 8001ab8:	40005800 	.word	0x40005800
 8001abc:	00061a80 	.word	0x00061a80

08001ac0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001ac6:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <MX_SPI3_Init+0x6c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001acc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001ad4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ad8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001af6:	2218      	movs	r2, #24
 8001af8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001b0e:	220a      	movs	r2, #10
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_SPI3_Init+0x68>)
 8001b14:	f002 fcae 	bl	8004474 <HAL_SPI_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001b1e:	f000 f8df 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200000d4 	.word	0x200000d4
 8001b2c:	40003c00 	.word	0x40003c00

08001b30 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_UART4_Init+0x4c>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <MX_UART4_Init+0x50>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_UART4_Init+0x4c>)
 8001b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_UART4_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_UART4_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_UART4_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_UART4_Init+0x4c>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_UART4_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_UART4_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_UART4_Init+0x4c>)
 8001b68:	f002 fec8 	bl	80048fc <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b72:	f000 f8b5 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000012c 	.word	0x2000012c
 8001b80:	40004c00 	.word	0x40004c00

08001b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001ba4:	f043 0310 	orr.w	r3, r3, #16
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a42      	ldr	r2, [pc, #264]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b40      	ldr	r3, [pc, #256]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a34      	ldr	r2, [pc, #208]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	2108      	movs	r1, #8
 8001c2a:	4828      	ldr	r0, [pc, #160]	; (8001ccc <MX_GPIO_Init+0x148>)
 8001c2c:	f000 ffd2 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_GPIO_Port, SEL_Pin, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	4826      	ldr	r0, [pc, #152]	; (8001cd0 <MX_GPIO_Init+0x14c>)
 8001c36:	f000 ffcd 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|CE_Pin|RST_Pin, GPIO_PIN_SET);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	21d0      	movs	r1, #208	; 0xd0
 8001c3e:	4825      	ldr	r0, [pc, #148]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001c40:	f000 ffc8 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001c44:	2308      	movs	r3, #8
 8001c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481c      	ldr	r0, [pc, #112]	; (8001ccc <MX_GPIO_Init+0x148>)
 8001c5c:	f000 fe20 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : eode_Pin */
  GPIO_InitStruct.Pin = eode_Pin;
 8001c60:	2302      	movs	r3, #2
 8001c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MX_GPIO_Init+0x154>)
 8001c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(eode_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	481a      	ldr	r0, [pc, #104]	; (8001cdc <MX_GPIO_Init+0x158>)
 8001c74:	f000 fe14 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_Pin */
  GPIO_InitStruct.Pin = SEL_Pin;
 8001c78:	2340      	movs	r3, #64	; 0x40
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEL_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4810      	ldr	r0, [pc, #64]	; (8001cd0 <MX_GPIO_Init+0x14c>)
 8001c90:	f000 fe06 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin CE_Pin RST_Pin */
  GPIO_InitStruct.Pin = DC_Pin|CE_Pin|RST_Pin;
 8001c94:	23d0      	movs	r3, #208	; 0xd0
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <MX_GPIO_Init+0x150>)
 8001cac:	f000 fdf8 	bl	80028a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	2007      	movs	r0, #7
 8001cb6:	f000 fdae 	bl	8002816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cba:	2007      	movs	r0, #7
 8001cbc:	f000 fdc7 	bl	800284e <HAL_NVIC_EnableIRQ>

}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	10110000 	.word	0x10110000
 8001cdc:	40020800 	.word	0x40020800

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_MspInit+0x4c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_MspInit+0x4c>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_MspInit+0x4c>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_MspInit+0x4c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_MspInit+0x4c>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_MspInit+0x4c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_I2C_MspInit+0x84>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d12c      	bne.n	8001dbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d84:	2312      	movs	r3, #18
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d90:	2304      	movs	r3, #4
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480c      	ldr	r0, [pc, #48]	; (8001dcc <HAL_I2C_MspInit+0x8c>)
 8001d9c:	f000 fd80 	bl	80028a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001daa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_I2C_MspInit+0x88>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40005800 	.word	0x40005800
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_SPI_MspInit+0x84>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d12b      	bne.n	8001e4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_SPI_MspInit+0x88>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_SPI_MspInit+0x88>)
 8001dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_SPI_MspInit+0x88>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_SPI_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_SPI_MspInit+0x88>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_SPI_MspInit+0x88>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001e2a:	2328      	movs	r3, #40	; 0x28
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <HAL_SPI_MspInit+0x8c>)
 8001e46:	f000 fd2b 	bl	80028a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40003c00 	.word	0x40003c00
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400

08001e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <HAL_UART_MspInit+0x84>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d12c      	bne.n	8001edc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a10      	ldr	r2, [pc, #64]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001eba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_UART_MspInit+0x8c>)
 8001ed8:	f000 fce2 	bl	80028a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40004c00 	.word	0x40004c00
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020800 	.word	0x40020800

08001ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <HardFault_Handler+0x4>

08001f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <MemManage_Handler+0x4>

08001f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <BusFault_Handler+0x4>

08001f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <UsageFault_Handler+0x4>

08001f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f44:	f000 fb2c 	bl	80025a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if( mode == 0){
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <EXTI1_IRQHandler+0x94>)
 8001f52:	f993 3000 	ldrsb.w	r3, [r3]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <EXTI1_IRQHandler+0x22>

		mode = 1;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <EXTI1_IRQHandler+0x94>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f60:	2002      	movs	r0, #2
 8001f62:	f000 fe51 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
		HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8001f66:	2007      	movs	r0, #7
 8001f68:	f000 fc8b 	bl	8002882 <HAL_NVIC_ClearPendingIRQ>
		return;
 8001f6c:	e036      	b.n	8001fdc <EXTI1_IRQHandler+0x90>

	}
	if( mode == 1){
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <EXTI1_IRQHandler+0x94>)
 8001f70:	f993 3000 	ldrsb.w	r3, [r3]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d109      	bne.n	8001f8c <EXTI1_IRQHandler+0x40>

		mode = 2;
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <EXTI1_IRQHandler+0x94>)
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f000 fe42 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
		HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8001f84:	2007      	movs	r0, #7
 8001f86:	f000 fc7c 	bl	8002882 <HAL_NVIC_ClearPendingIRQ>
		return;
 8001f8a:	e027      	b.n	8001fdc <EXTI1_IRQHandler+0x90>
	}

	if( mode == 2){
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <EXTI1_IRQHandler+0x94>)
 8001f8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d11c      	bne.n	8001fd0 <EXTI1_IRQHandler+0x84>
	  displayClear();
 8001f96:	f7fe ff91 	bl	8000ebc <displayClear>
	  displayCmd(0x08 | 0x04);
 8001f9a:	200c      	movs	r0, #12
 8001f9c:	f7fe ff00 	bl	8000da0 <displayCmd>
	  displaySetCursor(0,0);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7fe ff68 	bl	8000e78 <displaySetCursor>
	  displayPrint("X = ");
 8001fa8:	480e      	ldr	r0, [pc, #56]	; (8001fe4 <EXTI1_IRQHandler+0x98>)
 8001faa:	f7fe ff9f 	bl	8000eec <displayPrint>
	  displaySetCursor(0,2);
 8001fae:	2102      	movs	r1, #2
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7fe ff61 	bl	8000e78 <displaySetCursor>
	  displayPrint("Y = ");
 8001fb6:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <EXTI1_IRQHandler+0x9c>)
 8001fb8:	f7fe ff98 	bl	8000eec <displayPrint>
	  displaySetCursor(0,4);
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7fe ff5a 	bl	8000e78 <displaySetCursor>
	  displayPrint("Z = ");
 8001fc4:	4809      	ldr	r0, [pc, #36]	; (8001fec <EXTI1_IRQHandler+0xa0>)
 8001fc6:	f7fe ff91 	bl	8000eec <displayPrint>
	  mode = 0;
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <EXTI1_IRQHandler+0x94>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f000 fe19 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8001fd6:	2007      	movs	r0, #7
 8001fd8:	f000 fc53 	bl	8002882 <HAL_NVIC_ClearPendingIRQ>
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	08005134 	.word	0x08005134
 8001fe8:	0800513c 	.word	0x0800513c
 8001fec:	08005144 	.word	0x08005144

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <SystemInit+0x28>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a07      	ldr	r2, [pc, #28]	; (8002018 <SystemInit+0x28>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <SystemInit+0x28>)
 8002006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800200a:	609a      	str	r2, [r3, #8]
#endif
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <uartPrint>:
	UART4->BRR = 0x1117;
	UART4->CR1 |= USART_CR1_TE | USART_CR1_RE;
	UART4->CR1 |= USART_CR1_UE;
}

void uartPrint(char* data){
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0;; i++){
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
		if(data[i] == '\0') break;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <uartPrint+0x3a>
		UART4->DR = data[i];
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <uartPrint+0x48>)
 800203e:	605a      	str	r2, [r3, #4]
		while (!(UART4->SR & (1 << 7)));
 8002040:	bf00      	nop
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <uartPrint+0x48>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f9      	beq.n	8002042 <uartPrint+0x26>
	for(uint8_t i = 0;; i++){
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	3301      	adds	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
		if(data[i] == '\0') break;
 8002054:	e7e8      	b.n	8002028 <uartPrint+0xc>
 8002056:	bf00      	nop
	}
	return;
 8002058:	bf00      	nop
}
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40004c00 	.word	0x40004c00

08002068 <printInt>:

void printInt(int number){
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	char numb[] ={'0', '0', '0', '0', '0', '0'};
 8002070:	4ace      	ldr	r2, [pc, #824]	; (80023ac <printInt+0x344>)
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800207a:	6018      	str	r0, [r3, #0]
 800207c:	3304      	adds	r3, #4
 800207e:	8019      	strh	r1, [r3, #0]
	uint8_t offset = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
	if(number < 0) {numb[0] = '-'; offset = 1; number*=-1;}
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	da06      	bge.n	8002098 <printInt+0x30>
 800208a:	232d      	movs	r3, #45	; 0x2d
 800208c:	723b      	strb	r3, [r7, #8]
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	425b      	negs	r3, r3
 8002096:	607b      	str	r3, [r7, #4]
	if(number >= 10000){
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f242 720f 	movw	r2, #9999	; 0x270f
 800209e:	4293      	cmp	r3, r2
 80020a0:	f340 809d 	ble.w	80021de <printInt+0x176>
			numb[offset + 0] = intToChar((number / 10000) % 10);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4ac2      	ldr	r2, [pc, #776]	; (80023b0 <printInt+0x348>)
 80020a8:	fb82 1203 	smull	r1, r2, r2, r3
 80020ac:	1312      	asrs	r2, r2, #12
 80020ae:	17db      	asrs	r3, r3, #31
 80020b0:	1ad2      	subs	r2, r2, r3
 80020b2:	4bc0      	ldr	r3, [pc, #768]	; (80023b4 <printInt+0x34c>)
 80020b4:	fb83 1302 	smull	r1, r3, r3, r2
 80020b8:	1099      	asrs	r1, r3, #2
 80020ba:	17d3      	asrs	r3, r2, #31
 80020bc:	1ac9      	subs	r1, r1, r3
 80020be:	460b      	mov	r3, r1
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	1ad1      	subs	r1, r2, r3
 80020c8:	4608      	mov	r0, r1
 80020ca:	f7fe fe1b 	bl	8000d04 <intToChar>
 80020ce:	4602      	mov	r2, r0
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f107 0110 	add.w	r1, r7, #16
 80020d8:	440b      	add	r3, r1
 80020da:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 1] = intToChar((number / 1000) % 10);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4ab5      	ldr	r2, [pc, #724]	; (80023b8 <printInt+0x350>)
 80020e2:	fb82 1203 	smull	r1, r2, r2, r3
 80020e6:	1192      	asrs	r2, r2, #6
 80020e8:	17db      	asrs	r3, r3, #31
 80020ea:	1ad2      	subs	r2, r2, r3
 80020ec:	4bb1      	ldr	r3, [pc, #708]	; (80023b4 <printInt+0x34c>)
 80020ee:	fb83 1302 	smull	r1, r3, r3, r2
 80020f2:	1099      	asrs	r1, r3, #2
 80020f4:	17d3      	asrs	r3, r2, #31
 80020f6:	1ac9      	subs	r1, r1, r3
 80020f8:	460b      	mov	r3, r1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	1ad1      	subs	r1, r2, r3
 8002102:	4608      	mov	r0, r1
 8002104:	f7fe fdfe 	bl	8000d04 <intToChar>
 8002108:	4602      	mov	r2, r0
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	3301      	adds	r3, #1
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f107 0110 	add.w	r1, r7, #16
 8002114:	440b      	add	r3, r1
 8002116:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 2] = intToChar((number / 100) % 10);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4aa7      	ldr	r2, [pc, #668]	; (80023bc <printInt+0x354>)
 800211e:	fb82 1203 	smull	r1, r2, r2, r3
 8002122:	1152      	asrs	r2, r2, #5
 8002124:	17db      	asrs	r3, r3, #31
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	4ba2      	ldr	r3, [pc, #648]	; (80023b4 <printInt+0x34c>)
 800212a:	fb83 1302 	smull	r1, r3, r3, r2
 800212e:	1099      	asrs	r1, r3, #2
 8002130:	17d3      	asrs	r3, r2, #31
 8002132:	1ac9      	subs	r1, r1, r3
 8002134:	460b      	mov	r3, r1
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	1ad1      	subs	r1, r2, r3
 800213e:	4608      	mov	r0, r1
 8002140:	f7fe fde0 	bl	8000d04 <intToChar>
 8002144:	4602      	mov	r2, r0
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	3302      	adds	r3, #2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f107 0110 	add.w	r1, r7, #16
 8002150:	440b      	add	r3, r1
 8002152:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 3] = intToChar((number / 10) % 10);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a96      	ldr	r2, [pc, #600]	; (80023b4 <printInt+0x34c>)
 800215a:	fb82 1203 	smull	r1, r2, r2, r3
 800215e:	1092      	asrs	r2, r2, #2
 8002160:	17db      	asrs	r3, r3, #31
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	4b93      	ldr	r3, [pc, #588]	; (80023b4 <printInt+0x34c>)
 8002166:	fb83 1302 	smull	r1, r3, r3, r2
 800216a:	1099      	asrs	r1, r3, #2
 800216c:	17d3      	asrs	r3, r2, #31
 800216e:	1ac9      	subs	r1, r1, r3
 8002170:	460b      	mov	r3, r1
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	1ad1      	subs	r1, r2, r3
 800217a:	4608      	mov	r0, r1
 800217c:	f7fe fdc2 	bl	8000d04 <intToChar>
 8002180:	4602      	mov	r2, r0
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	3303      	adds	r3, #3
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	f107 0110 	add.w	r1, r7, #16
 800218c:	440b      	add	r3, r1
 800218e:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 4] = intToChar((number % 10));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	4b87      	ldr	r3, [pc, #540]	; (80023b4 <printInt+0x34c>)
 8002196:	fb83 1302 	smull	r1, r3, r3, r2
 800219a:	1099      	asrs	r1, r3, #2
 800219c:	17d3      	asrs	r3, r2, #31
 800219e:	1ac9      	subs	r1, r1, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	1ad1      	subs	r1, r2, r3
 80021aa:	4608      	mov	r0, r1
 80021ac:	f7fe fdaa 	bl	8000d04 <intToChar>
 80021b0:	4602      	mov	r2, r0
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	3304      	adds	r3, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f107 0110 	add.w	r1, r7, #16
 80021bc:	440b      	add	r3, r1
 80021be:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 5] = '\0';
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3305      	adds	r3, #5
 80021c6:	f107 0210 	add.w	r2, r7, #16
 80021ca:	4413      	add	r3, r2
 80021cc:	2200      	movs	r2, #0
 80021ce:	f803 2c08 	strb.w	r2, [r3, #-8]
			uartPrint(numb);
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff20 	bl	800201c <uartPrint>
			return;
 80021dc:	e15e      	b.n	800249c <printInt+0x434>
	}
	if(number >= 1000){
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021e4:	db7e      	blt.n	80022e4 <printInt+0x27c>
			numb[offset + 0] = intToChar((number / 1000) % 10);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a73      	ldr	r2, [pc, #460]	; (80023b8 <printInt+0x350>)
 80021ea:	fb82 1203 	smull	r1, r2, r2, r3
 80021ee:	1192      	asrs	r2, r2, #6
 80021f0:	17db      	asrs	r3, r3, #31
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <printInt+0x34c>)
 80021f6:	fb83 1302 	smull	r1, r3, r3, r2
 80021fa:	1099      	asrs	r1, r3, #2
 80021fc:	17d3      	asrs	r3, r2, #31
 80021fe:	1ac9      	subs	r1, r1, r3
 8002200:	460b      	mov	r3, r1
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	1ad1      	subs	r1, r2, r3
 800220a:	4608      	mov	r0, r1
 800220c:	f7fe fd7a 	bl	8000d04 <intToChar>
 8002210:	4602      	mov	r2, r0
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f107 0110 	add.w	r1, r7, #16
 800221a:	440b      	add	r3, r1
 800221c:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 1] = intToChar((number / 100) % 10);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a66      	ldr	r2, [pc, #408]	; (80023bc <printInt+0x354>)
 8002224:	fb82 1203 	smull	r1, r2, r2, r3
 8002228:	1152      	asrs	r2, r2, #5
 800222a:	17db      	asrs	r3, r3, #31
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <printInt+0x34c>)
 8002230:	fb83 1302 	smull	r1, r3, r3, r2
 8002234:	1099      	asrs	r1, r3, #2
 8002236:	17d3      	asrs	r3, r2, #31
 8002238:	1ac9      	subs	r1, r1, r3
 800223a:	460b      	mov	r3, r1
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	1ad1      	subs	r1, r2, r3
 8002244:	4608      	mov	r0, r1
 8002246:	f7fe fd5d 	bl	8000d04 <intToChar>
 800224a:	4602      	mov	r2, r0
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3301      	adds	r3, #1
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	f107 0110 	add.w	r1, r7, #16
 8002256:	440b      	add	r3, r1
 8002258:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 2] = intToChar((number / 10) % 10);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a55      	ldr	r2, [pc, #340]	; (80023b4 <printInt+0x34c>)
 8002260:	fb82 1203 	smull	r1, r2, r2, r3
 8002264:	1092      	asrs	r2, r2, #2
 8002266:	17db      	asrs	r3, r3, #31
 8002268:	1ad2      	subs	r2, r2, r3
 800226a:	4b52      	ldr	r3, [pc, #328]	; (80023b4 <printInt+0x34c>)
 800226c:	fb83 1302 	smull	r1, r3, r3, r2
 8002270:	1099      	asrs	r1, r3, #2
 8002272:	17d3      	asrs	r3, r2, #31
 8002274:	1ac9      	subs	r1, r1, r3
 8002276:	460b      	mov	r3, r1
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	1ad1      	subs	r1, r2, r3
 8002280:	4608      	mov	r0, r1
 8002282:	f7fe fd3f 	bl	8000d04 <intToChar>
 8002286:	4602      	mov	r2, r0
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	3302      	adds	r3, #2
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f107 0110 	add.w	r1, r7, #16
 8002292:	440b      	add	r3, r1
 8002294:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 3] = intToChar((number % 10));
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <printInt+0x34c>)
 800229c:	fb83 1302 	smull	r1, r3, r3, r2
 80022a0:	1099      	asrs	r1, r3, #2
 80022a2:	17d3      	asrs	r3, r2, #31
 80022a4:	1ac9      	subs	r1, r1, r3
 80022a6:	460b      	mov	r3, r1
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	1ad1      	subs	r1, r2, r3
 80022b0:	4608      	mov	r0, r1
 80022b2:	f7fe fd27 	bl	8000d04 <intToChar>
 80022b6:	4602      	mov	r2, r0
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	3303      	adds	r3, #3
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f107 0110 	add.w	r1, r7, #16
 80022c2:	440b      	add	r3, r1
 80022c4:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 4] = '\0';
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	3304      	adds	r3, #4
 80022cc:	f107 0210 	add.w	r2, r7, #16
 80022d0:	4413      	add	r3, r2
 80022d2:	2200      	movs	r2, #0
 80022d4:	f803 2c08 	strb.w	r2, [r3, #-8]
			uartPrint(numb);
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fe9d 	bl	800201c <uartPrint>
			return;
 80022e2:	e0db      	b.n	800249c <printInt+0x434>
	}
	if(number >= 100){
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b63      	cmp	r3, #99	; 0x63
 80022e8:	dd6a      	ble.n	80023c0 <printInt+0x358>
			numb[offset + 0] = intToChar((number / 100) % 10);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a33      	ldr	r2, [pc, #204]	; (80023bc <printInt+0x354>)
 80022ee:	fb82 1203 	smull	r1, r2, r2, r3
 80022f2:	1152      	asrs	r2, r2, #5
 80022f4:	17db      	asrs	r3, r3, #31
 80022f6:	1ad2      	subs	r2, r2, r3
 80022f8:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <printInt+0x34c>)
 80022fa:	fb83 1302 	smull	r1, r3, r3, r2
 80022fe:	1099      	asrs	r1, r3, #2
 8002300:	17d3      	asrs	r3, r2, #31
 8002302:	1ac9      	subs	r1, r1, r3
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	1ad1      	subs	r1, r2, r3
 800230e:	4608      	mov	r0, r1
 8002310:	f7fe fcf8 	bl	8000d04 <intToChar>
 8002314:	4602      	mov	r2, r0
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	f107 0110 	add.w	r1, r7, #16
 800231e:	440b      	add	r3, r1
 8002320:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 1] = intToChar((number / 10) % 10);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <printInt+0x34c>)
 8002328:	fb82 1203 	smull	r1, r2, r2, r3
 800232c:	1092      	asrs	r2, r2, #2
 800232e:	17db      	asrs	r3, r3, #31
 8002330:	1ad2      	subs	r2, r2, r3
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <printInt+0x34c>)
 8002334:	fb83 1302 	smull	r1, r3, r3, r2
 8002338:	1099      	asrs	r1, r3, #2
 800233a:	17d3      	asrs	r3, r2, #31
 800233c:	1ac9      	subs	r1, r1, r3
 800233e:	460b      	mov	r3, r1
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	1ad1      	subs	r1, r2, r3
 8002348:	4608      	mov	r0, r1
 800234a:	f7fe fcdb 	bl	8000d04 <intToChar>
 800234e:	4602      	mov	r2, r0
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	3301      	adds	r3, #1
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f107 0110 	add.w	r1, r7, #16
 800235a:	440b      	add	r3, r1
 800235c:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 2] = intToChar((number % 10));
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <printInt+0x34c>)
 8002364:	fb83 1302 	smull	r1, r3, r3, r2
 8002368:	1099      	asrs	r1, r3, #2
 800236a:	17d3      	asrs	r3, r2, #31
 800236c:	1ac9      	subs	r1, r1, r3
 800236e:	460b      	mov	r3, r1
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	1ad1      	subs	r1, r2, r3
 8002378:	4608      	mov	r0, r1
 800237a:	f7fe fcc3 	bl	8000d04 <intToChar>
 800237e:	4602      	mov	r2, r0
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	3302      	adds	r3, #2
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	f107 0110 	add.w	r1, r7, #16
 800238a:	440b      	add	r3, r1
 800238c:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 3] = '\0';
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	3303      	adds	r3, #3
 8002394:	f107 0210 	add.w	r2, r7, #16
 8002398:	4413      	add	r3, r2
 800239a:	2200      	movs	r2, #0
 800239c:	f803 2c08 	strb.w	r2, [r3, #-8]
			uartPrint(numb);
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fe39 	bl	800201c <uartPrint>
			return;
 80023aa:	e077      	b.n	800249c <printInt+0x434>
 80023ac:	0800514c 	.word	0x0800514c
 80023b0:	68db8bad 	.word	0x68db8bad
 80023b4:	66666667 	.word	0x66666667
 80023b8:	10624dd3 	.word	0x10624dd3
 80023bc:	51eb851f 	.word	0x51eb851f
	}
	if(number >= 10){
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b09      	cmp	r3, #9
 80023c4:	dd42      	ble.n	800244c <printInt+0x3e4>
			numb[offset + 0] = intToChar((number / 10) % 10);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a36      	ldr	r2, [pc, #216]	; (80024a4 <printInt+0x43c>)
 80023ca:	fb82 1203 	smull	r1, r2, r2, r3
 80023ce:	1092      	asrs	r2, r2, #2
 80023d0:	17db      	asrs	r3, r3, #31
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <printInt+0x43c>)
 80023d6:	fb83 1302 	smull	r1, r3, r3, r2
 80023da:	1099      	asrs	r1, r3, #2
 80023dc:	17d3      	asrs	r3, r2, #31
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	1ad1      	subs	r1, r2, r3
 80023ea:	4608      	mov	r0, r1
 80023ec:	f7fe fc8a 	bl	8000d04 <intToChar>
 80023f0:	4602      	mov	r2, r0
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f107 0110 	add.w	r1, r7, #16
 80023fa:	440b      	add	r3, r1
 80023fc:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 1] = intToChar((number % 10));
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <printInt+0x43c>)
 8002404:	fb83 1302 	smull	r1, r3, r3, r2
 8002408:	1099      	asrs	r1, r3, #2
 800240a:	17d3      	asrs	r3, r2, #31
 800240c:	1ac9      	subs	r1, r1, r3
 800240e:	460b      	mov	r3, r1
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	1ad1      	subs	r1, r2, r3
 8002418:	4608      	mov	r0, r1
 800241a:	f7fe fc73 	bl	8000d04 <intToChar>
 800241e:	4602      	mov	r2, r0
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	3301      	adds	r3, #1
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	f107 0110 	add.w	r1, r7, #16
 800242a:	440b      	add	r3, r1
 800242c:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 2] = '\0';
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	3302      	adds	r3, #2
 8002434:	f107 0210 	add.w	r2, r7, #16
 8002438:	4413      	add	r3, r2
 800243a:	2200      	movs	r2, #0
 800243c:	f803 2c08 	strb.w	r2, [r3, #-8]
			uartPrint(numb);
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fde9 	bl	800201c <uartPrint>
			return;
 800244a:	e027      	b.n	800249c <printInt+0x434>
	}
	if(number <= 10){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b0a      	cmp	r3, #10
 8002450:	dc24      	bgt.n	800249c <printInt+0x434>
			numb[offset + 0] = intToChar((number % 10));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <printInt+0x43c>)
 8002456:	fb83 1302 	smull	r1, r3, r3, r2
 800245a:	1099      	asrs	r1, r3, #2
 800245c:	17d3      	asrs	r3, r2, #31
 800245e:	1ac9      	subs	r1, r1, r3
 8002460:	460b      	mov	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	1ad1      	subs	r1, r2, r3
 800246a:	4608      	mov	r0, r1
 800246c:	f7fe fc4a 	bl	8000d04 <intToChar>
 8002470:	4602      	mov	r2, r0
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f107 0110 	add.w	r1, r7, #16
 800247a:	440b      	add	r3, r1
 800247c:	f803 2c08 	strb.w	r2, [r3, #-8]
			numb[offset + 1] = '\0';
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	3301      	adds	r3, #1
 8002484:	f107 0210 	add.w	r2, r7, #16
 8002488:	4413      	add	r3, r2
 800248a:	2200      	movs	r2, #0
 800248c:	f803 2c08 	strb.w	r2, [r3, #-8]
			uartPrint(numb);
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fdc1 	bl	800201c <uartPrint>
			return;
 800249a:	bf00      	nop
	}

}
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	66666667 	.word	0x66666667

080024a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024ae:	e003      	b.n	80024b8 <LoopCopyDataInit>

080024b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024b6:	3104      	adds	r1, #4

080024b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024b8:	480b      	ldr	r0, [pc, #44]	; (80024e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024c0:	d3f6      	bcc.n	80024b0 <CopyDataInit>
  ldr  r2, =_sbss
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024c4:	e002      	b.n	80024cc <LoopFillZerobss>

080024c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024c8:	f842 3b04 	str.w	r3, [r2], #4

080024cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024d0:	d3f9      	bcc.n	80024c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024d2:	f7ff fd8d 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024d6:	f002 fddb 	bl	8005090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024da:	f7ff f92d 	bl	8001738 <main>
  bx  lr    
 80024de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80024e4:	08005558 	.word	0x08005558
  ldr  r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024ec:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 80024f0:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 80024f4:	20000170 	.word	0x20000170

080024f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <ADC_IRQHandler>
	...

080024fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002500:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_Init+0x40>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <HAL_Init+0x40>)
 8002506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_Init+0x40>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_Init+0x40>)
 8002512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a07      	ldr	r2, [pc, #28]	; (800253c <HAL_Init+0x40>)
 800251e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002524:	2003      	movs	r0, #3
 8002526:	f000 f96b 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252a:	2000      	movs	r0, #0
 800252c:	f000 f808 	bl	8002540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002530:	f7ff fbde 	bl	8001cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023c00 	.word	0x40023c00

08002540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_InitTick+0x54>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_InitTick+0x58>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002556:	fbb3 f3f1 	udiv	r3, r3, r1
 800255a:	fbb2 f3f3 	udiv	r3, r2, r3
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f983 	bl	800286a <HAL_SYSTICK_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e00e      	b.n	800258c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b0f      	cmp	r3, #15
 8002572:	d80a      	bhi.n	800258a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002574:	2200      	movs	r2, #0
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f000 f94b 	bl	8002816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <HAL_InitTick+0x5c>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	2000004c 	.word	0x2000004c
 8002598:	20000054 	.word	0x20000054
 800259c:	20000050 	.word	0x20000050

080025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_IncTick+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_IncTick+0x24>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000054 	.word	0x20000054
 80025c4:	2000016c 	.word	0x2000016c

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	2000016c 	.word	0x2000016c

080025e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff ffee 	bl	80025c8 <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d005      	beq.n	8002606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_Delay+0x40>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002606:	bf00      	nop
 8002608:	f7ff ffde 	bl	80025c8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d8f7      	bhi.n	8002608 <HAL_Delay+0x28>
  {
  }
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000054 	.word	0x20000054

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800264c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	60d3      	str	r3, [r2, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	2b00      	cmp	r3, #0
 8002698:	db0b      	blt.n	80026b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <__NVIC_EnableIRQ+0x38>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2001      	movs	r0, #1
 80026aa:	fa00 f202 	lsl.w	r2, r0, r2
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0c      	blt.n	80026f0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4907      	ldr	r1, [pc, #28]	; (80026fc <__NVIC_ClearPendingIRQ+0x38>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	3360      	adds	r3, #96	; 0x60
 80026ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	; (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff8e 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff0b 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff20 	bl	800266c <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff8e 	bl	8002754 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5d 	bl	8002700 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff13 	bl	8002688 <__NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffa2 	bl	80027bc <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff17 	bl	80026c4 <__NVIC_ClearPendingIRQ>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	e16b      	b.n	8002b94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028bc:	2201      	movs	r2, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f040 815a 	bne.w	8002b8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d00b      	beq.n	80028fa <HAL_GPIO_Init+0x5a>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ee:	2b11      	cmp	r3, #17
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	d130      	bne.n	800295c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002930:	2201      	movs	r2, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 0201 	and.w	r2, r3, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0xfc>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b12      	cmp	r3, #18
 800299a:	d123      	bne.n	80029e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	08da      	lsrs	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3208      	adds	r2, #8
 80029a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	220f      	movs	r2, #15
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	08da      	lsrs	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3208      	adds	r2, #8
 80029de:	69b9      	ldr	r1, [r7, #24]
 80029e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0203 	and.w	r2, r3, #3
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80b4 	beq.w	8002b8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <HAL_GPIO_Init+0x308>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a5e      	ldr	r2, [pc, #376]	; (8002ba8 <HAL_GPIO_Init+0x308>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <HAL_GPIO_Init+0x308>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a42:	4a5a      	ldr	r2, [pc, #360]	; (8002bac <HAL_GPIO_Init+0x30c>)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	3302      	adds	r3, #2
 8002a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	220f      	movs	r2, #15
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a51      	ldr	r2, [pc, #324]	; (8002bb0 <HAL_GPIO_Init+0x310>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d02b      	beq.n	8002ac6 <HAL_GPIO_Init+0x226>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a50      	ldr	r2, [pc, #320]	; (8002bb4 <HAL_GPIO_Init+0x314>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d025      	beq.n	8002ac2 <HAL_GPIO_Init+0x222>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4f      	ldr	r2, [pc, #316]	; (8002bb8 <HAL_GPIO_Init+0x318>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01f      	beq.n	8002abe <HAL_GPIO_Init+0x21e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <HAL_GPIO_Init+0x31c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d019      	beq.n	8002aba <HAL_GPIO_Init+0x21a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4d      	ldr	r2, [pc, #308]	; (8002bc0 <HAL_GPIO_Init+0x320>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_GPIO_Init+0x216>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4c      	ldr	r2, [pc, #304]	; (8002bc4 <HAL_GPIO_Init+0x324>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00d      	beq.n	8002ab2 <HAL_GPIO_Init+0x212>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4b      	ldr	r2, [pc, #300]	; (8002bc8 <HAL_GPIO_Init+0x328>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <HAL_GPIO_Init+0x20e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <HAL_GPIO_Init+0x32c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_GPIO_Init+0x20a>
 8002aa6:	2307      	movs	r3, #7
 8002aa8:	e00e      	b.n	8002ac8 <HAL_GPIO_Init+0x228>
 8002aaa:	2308      	movs	r3, #8
 8002aac:	e00c      	b.n	8002ac8 <HAL_GPIO_Init+0x228>
 8002aae:	2306      	movs	r3, #6
 8002ab0:	e00a      	b.n	8002ac8 <HAL_GPIO_Init+0x228>
 8002ab2:	2305      	movs	r3, #5
 8002ab4:	e008      	b.n	8002ac8 <HAL_GPIO_Init+0x228>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x228>
 8002aba:	2303      	movs	r3, #3
 8002abc:	e004      	b.n	8002ac8 <HAL_GPIO_Init+0x228>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e002      	b.n	8002ac8 <HAL_GPIO_Init+0x228>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_GPIO_Init+0x228>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	f002 0203 	and.w	r2, r2, #3
 8002ace:	0092      	lsls	r2, r2, #2
 8002ad0:	4093      	lsls	r3, r2
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad8:	4934      	ldr	r1, [pc, #208]	; (8002bac <HAL_GPIO_Init+0x30c>)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae6:	4b3a      	ldr	r3, [pc, #232]	; (8002bd0 <HAL_GPIO_Init+0x330>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b0a:	4a31      	ldr	r2, [pc, #196]	; (8002bd0 <HAL_GPIO_Init+0x330>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b10:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_GPIO_Init+0x330>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b34:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <HAL_GPIO_Init+0x330>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_GPIO_Init+0x330>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <HAL_GPIO_Init+0x330>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_GPIO_Init+0x330>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b88:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <HAL_GPIO_Init+0x330>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3301      	adds	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	f67f ae90 	bls.w	80028bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3724      	adds	r7, #36	; 0x24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40020400 	.word	0x40020400
 8002bb8:	40020800 	.word	0x40020800
 8002bbc:	40020c00 	.word	0x40020c00
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40021400 	.word	0x40021400
 8002bc8:	40021800 	.word	0x40021800
 8002bcc:	40021c00 	.word	0x40021c00
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
 8002be0:	4613      	mov	r3, r2
 8002be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be4:	787b      	ldrb	r3, [r7, #1]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bf0:	e003      	b.n	8002bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	041a      	lsls	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	619a      	str	r2, [r3, #24]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f806 	bl	8002c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e11f      	b.n	8002ea2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff f862 	bl	8001d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	; 0x24
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ca2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f001 fbb6 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8002cb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a7b      	ldr	r2, [pc, #492]	; (8002eac <HAL_I2C_Init+0x25c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d807      	bhi.n	8002cd4 <HAL_I2C_Init+0x84>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a7a      	ldr	r2, [pc, #488]	; (8002eb0 <HAL_I2C_Init+0x260>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e006      	b.n	8002ce2 <HAL_I2C_Init+0x92>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_I2C_Init+0x264>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0db      	b.n	8002ea2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a72      	ldr	r2, [pc, #456]	; (8002eb8 <HAL_I2C_Init+0x268>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a64      	ldr	r2, [pc, #400]	; (8002eac <HAL_I2C_Init+0x25c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d802      	bhi.n	8002d24 <HAL_I2C_Init+0xd4>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	e009      	b.n	8002d38 <HAL_I2C_Init+0xe8>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	4a63      	ldr	r2, [pc, #396]	; (8002ebc <HAL_I2C_Init+0x26c>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4956      	ldr	r1, [pc, #344]	; (8002eac <HAL_I2C_Init+0x25c>)
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d80d      	bhi.n	8002d74 <HAL_I2C_Init+0x124>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e59      	subs	r1, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	bf38      	it	cc
 8002d70:	2304      	movcc	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1c4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x150>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x176>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x17e>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1c4>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x1a4>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1c4>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	817b      	strh	r3, [r7, #10]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	813b      	strh	r3, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eda:	f7ff fb75 	bl	80025c8 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	f040 80d9 	bne.w	80030a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	2319      	movs	r3, #25
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	496d      	ldr	r1, [pc, #436]	; (80030ac <HAL_I2C_Mem_Write+0x1ec>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fc7b 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0cc      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Mem_Write+0x56>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e0c5      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d007      	beq.n	8002f3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2221      	movs	r2, #33	; 0x21
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a3a      	ldr	r2, [r7, #32]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a4d      	ldr	r2, [pc, #308]	; (80030b0 <HAL_I2C_Mem_Write+0x1f0>)
 8002f7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f7e:	88f8      	ldrh	r0, [r7, #6]
 8002f80:	893a      	ldrh	r2, [r7, #8]
 8002f82:	8979      	ldrh	r1, [r7, #10]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fab6 	bl	8003500 <I2C_RequestMemoryWrite>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d052      	beq.n	8003040 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e081      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fcfc 	bl	80039a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d107      	bne.n	8002fc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06b      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_I2C_Mem_Write+0x180>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1aa      	bne.n	8002f9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fce8 	bl	8003a22 <I2C_WaitOnBTFFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e016      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	817b      	strh	r3, [r7, #10]
 80030c6:	460b      	mov	r3, r1
 80030c8:	813b      	strh	r3, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ce:	f7ff fa7b 	bl	80025c8 <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b20      	cmp	r3, #32
 80030de:	f040 8208 	bne.w	80034f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2319      	movs	r3, #25
 80030e8:	2201      	movs	r2, #1
 80030ea:	497b      	ldr	r1, [pc, #492]	; (80032d8 <HAL_I2C_Mem_Read+0x224>)
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fb81 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	e1fb      	b.n	80034f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_I2C_Mem_Read+0x56>
 8003106:	2302      	movs	r3, #2
 8003108:	e1f4      	b.n	80034f4 <HAL_I2C_Mem_Read+0x440>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d007      	beq.n	8003130 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2222      	movs	r2, #34	; 0x22
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2240      	movs	r2, #64	; 0x40
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a5b      	ldr	r2, [pc, #364]	; (80032dc <HAL_I2C_Mem_Read+0x228>)
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003172:	88f8      	ldrh	r0, [r7, #6]
 8003174:	893a      	ldrh	r2, [r7, #8]
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	4603      	mov	r3, r0
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fa50 	bl	8003628 <I2C_RequestMemoryRead>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1b0      	b.n	80034f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d113      	bne.n	80031c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	623b      	str	r3, [r7, #32]
 80031ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e184      	b.n	80034cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d11b      	bne.n	8003202 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e164      	b.n	80034cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	2b02      	cmp	r3, #2
 8003208:	d11b      	bne.n	8003242 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003218:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003228:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	e144      	b.n	80034cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003258:	e138      	b.n	80034cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b03      	cmp	r3, #3
 8003260:	f200 80f1 	bhi.w	8003446 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	2b01      	cmp	r3, #1
 800326a:	d123      	bne.n	80032b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fc17 	bl	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e139      	b.n	80034f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032b2:	e10b      	b.n	80034cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d14e      	bne.n	800335a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	2200      	movs	r2, #0
 80032c4:	4906      	ldr	r1, [pc, #24]	; (80032e0 <HAL_I2C_Mem_Read+0x22c>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fa94 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e10e      	b.n	80034f4 <HAL_I2C_Mem_Read+0x440>
 80032d6:	bf00      	nop
 80032d8:	00100002 	.word	0x00100002
 80032dc:	ffff0000 	.word	0xffff0000
 80032e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003358:	e0b8      	b.n	80034cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003360:	2200      	movs	r2, #0
 8003362:	4966      	ldr	r1, [pc, #408]	; (80034fc <HAL_I2C_Mem_Read+0x448>)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fa45 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0bf      	b.n	80034f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	2200      	movs	r2, #0
 80033be:	494f      	ldr	r1, [pc, #316]	; (80034fc <HAL_I2C_Mem_Read+0x448>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fa17 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e091      	b.n	80034f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003444:	e042      	b.n	80034cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fb2a 	bl	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e04c      	b.n	80034f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d118      	bne.n	80034cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f aec2 	bne.w	800325a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3728      	adds	r7, #40	; 0x28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	00010004 	.word	0x00010004

08003500 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	460b      	mov	r3, r1
 8003514:	813b      	strh	r3, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003528:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	2200      	movs	r2, #0
 8003532:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f95c 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e05f      	b.n	800361c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800355c:	897b      	ldrh	r3, [r7, #10]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800356a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	6a3a      	ldr	r2, [r7, #32]
 8003570:	492c      	ldr	r1, [pc, #176]	; (8003624 <I2C_RequestMemoryWrite+0x124>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f995 	bl	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e04c      	b.n	800361c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	6a39      	ldr	r1, [r7, #32]
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f9ff 	bl	80039a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d107      	bne.n	80035c0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e02b      	b.n	800361c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ca:	893b      	ldrh	r3, [r7, #8]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	611a      	str	r2, [r3, #16]
 80035d4:	e021      	b.n	800361a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035d6:	893b      	ldrh	r3, [r7, #8]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	b29b      	uxth	r3, r3
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	6a39      	ldr	r1, [r7, #32]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f9d9 	bl	80039a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d107      	bne.n	800360c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e005      	b.n	800361c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	00010002 	.word	0x00010002

08003628 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	461a      	mov	r2, r3
 8003636:	4603      	mov	r3, r0
 8003638:	817b      	strh	r3, [r7, #10]
 800363a:	460b      	mov	r3, r1
 800363c:	813b      	strh	r3, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003650:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003660:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	2200      	movs	r2, #0
 800366a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f8c0 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00c      	beq.n	8003694 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e0a9      	b.n	80037e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003694:	897b      	ldrh	r3, [r7, #10]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	6a3a      	ldr	r2, [r7, #32]
 80036a8:	4951      	ldr	r1, [pc, #324]	; (80037f0 <I2C_RequestMemoryRead+0x1c8>)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f8f9 	bl	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e096      	b.n	80037e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d2:	6a39      	ldr	r1, [r7, #32]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f963 	bl	80039a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d107      	bne.n	80036f8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e075      	b.n	80037e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003702:	893b      	ldrh	r3, [r7, #8]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]
 800370c:	e021      	b.n	8003752 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800370e:	893b      	ldrh	r3, [r7, #8]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	b29b      	uxth	r3, r3
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	6a39      	ldr	r1, [r7, #32]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f93d 	bl	80039a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b04      	cmp	r3, #4
 8003732:	d107      	bne.n	8003744 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e04f      	b.n	80037e8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	6a39      	ldr	r1, [r7, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f922 	bl	80039a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b04      	cmp	r3, #4
 8003768:	d107      	bne.n	800377a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e034      	b.n	80037e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800378c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2200      	movs	r2, #0
 8003796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f82a 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00c      	beq.n	80037c0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e013      	b.n	80037e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037c0:	897b      	ldrh	r3, [r7, #10]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	6a3a      	ldr	r2, [r7, #32]
 80037d4:	4906      	ldr	r1, [pc, #24]	; (80037f0 <I2C_RequestMemoryRead+0x1c8>)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f863 	bl	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	00010002 	.word	0x00010002

080037f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003804:	e025      	b.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d021      	beq.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fedb 	bl	80025c8 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e023      	b.n	800389a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d10d      	bne.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x84>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	e00c      	b.n	8003892 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d0b6      	beq.n	8003806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038b0:	e051      	b.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	d123      	bne.n	800390a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f043 0204 	orr.w	r2, r3, #4
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e046      	b.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d021      	beq.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe fe59 	bl	80025c8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d116      	bne.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e020      	b.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10c      	bne.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4013      	ands	r3, r2
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	e00b      	b.n	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	43da      	mvns	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d18d      	bne.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ac:	e02d      	b.n	8003a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f8ce 	bl	8003b50 <I2C_IsAcknowledgeFailed>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e02d      	b.n	8003a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d021      	beq.n	8003a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fe fdff 	bl	80025c8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d116      	bne.n	8003a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f043 0220 	orr.w	r2, r3, #32
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e007      	b.n	8003a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d1ca      	bne.n	80039ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a2e:	e02d      	b.n	8003a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f88d 	bl	8003b50 <I2C_IsAcknowledgeFailed>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e02d      	b.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d021      	beq.n	8003a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a48:	f7fe fdbe 	bl	80025c8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d302      	bcc.n	8003a5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d116      	bne.n	8003a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f043 0220 	orr.w	r2, r3, #32
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e007      	b.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d1ca      	bne.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ab0:	e042      	b.n	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d119      	bne.n	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0210 	mvn.w	r2, #16
 8003ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e029      	b.n	8003b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7fe fd68 	bl	80025c8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d116      	bne.n	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e007      	b.n	8003b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d1b5      	bne.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b66:	d11b      	bne.n	8003ba0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f043 0204 	orr.w	r2, r3, #4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e25b      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d075      	beq.n	8003cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bce:	4ba3      	ldr	r3, [pc, #652]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bda:	4ba0      	ldr	r3, [pc, #640]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d112      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4b9d      	ldr	r3, [pc, #628]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	4b99      	ldr	r3, [pc, #612]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05b      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x108>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d157      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e236      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x74>
 8003c16:	4b91      	ldr	r3, [pc, #580]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a90      	ldr	r2, [pc, #576]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x98>
 8003c2e:	4b8b      	ldr	r3, [pc, #556]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a8a      	ldr	r2, [pc, #552]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a87      	ldr	r2, [pc, #540]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c48:	4b84      	ldr	r3, [pc, #528]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a83      	ldr	r2, [pc, #524]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b81      	ldr	r3, [pc, #516]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a80      	ldr	r2, [pc, #512]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe fcae 	bl	80025c8 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fe fcaa 	bl	80025c8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1fb      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fe fc9a 	bl	80025c8 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fe fc96 	bl	80025c8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1e7      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	4b6c      	ldr	r3, [pc, #432]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0xe8>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d063      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b62      	ldr	r3, [pc, #392]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d11c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cde:	4b5f      	ldr	r3, [pc, #380]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e1bb      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4952      	ldr	r1, [pc, #328]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	e03a      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d20:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCC_OscConfig+0x2b0>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fe fc4f 	bl	80025c8 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fe fc4b 	bl	80025c8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e19c      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4940      	ldr	r1, [pc, #256]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	e015      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_OscConfig+0x2b0>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe fc2e 	bl	80025c8 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fe fc2a 	bl	80025c8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e17b      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d030      	beq.n	8003dfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da2:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <HAL_RCC_OscConfig+0x2b4>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fe fc0e 	bl	80025c8 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db0:	f7fe fc0a 	bl	80025c8 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e15b      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x200>
 8003dce:	e015      	b.n	8003dfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd0:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_RCC_OscConfig+0x2b4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fe fbf7 	bl	80025c8 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dde:	f7fe fbf3 	bl	80025c8 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e144      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80a0 	beq.w	8003f4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a0e      	ldr	r2, [pc, #56]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_OscConfig+0x2b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d121      	bne.n	8003e8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_RCC_OscConfig+0x2b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <HAL_RCC_OscConfig+0x2b8>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e52:	f7fe fbb9 	bl	80025c8 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	e011      	b.n	8003e7e <HAL_RCC_OscConfig+0x2ce>
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	42470000 	.word	0x42470000
 8003e64:	42470e80 	.word	0x42470e80
 8003e68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fe fbac 	bl	80025c8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e0fd      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	4b81      	ldr	r3, [pc, #516]	; (8004084 <HAL_RCC_OscConfig+0x4d4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d106      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x2f0>
 8003e92:	4b7d      	ldr	r3, [pc, #500]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a7c      	ldr	r2, [pc, #496]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e01c      	b.n	8003eda <HAL_RCC_OscConfig+0x32a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x312>
 8003ea8:	4b77      	ldr	r3, [pc, #476]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a76      	ldr	r2, [pc, #472]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb4:	4b74      	ldr	r3, [pc, #464]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a73      	ldr	r2, [pc, #460]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e00b      	b.n	8003eda <HAL_RCC_OscConfig+0x32a>
 8003ec2:	4b71      	ldr	r3, [pc, #452]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a70      	ldr	r2, [pc, #448]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	4b6e      	ldr	r3, [pc, #440]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a6d      	ldr	r2, [pc, #436]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d015      	beq.n	8003f0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fb71 	bl	80025c8 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fe fb6d 	bl	80025c8 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0bc      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f00:	4b61      	ldr	r3, [pc, #388]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ee      	beq.n	8003eea <HAL_RCC_OscConfig+0x33a>
 8003f0c:	e014      	b.n	8003f38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fe fb5b 	bl	80025c8 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fe fb57 	bl	80025c8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0a6      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2c:	4b56      	ldr	r3, [pc, #344]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ee      	bne.n	8003f16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4b52      	ldr	r3, [pc, #328]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a51      	ldr	r2, [pc, #324]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8092 	beq.w	8004078 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f54:	4b4c      	ldr	r3, [pc, #304]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d05c      	beq.n	800401a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d141      	bne.n	8003fec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b48      	ldr	r3, [pc, #288]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fe fb2b 	bl	80025c8 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fe fb27 	bl	80025c8 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e078      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f88:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	019b      	lsls	r3, r3, #6
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	3b01      	subs	r3, #1
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	061b      	lsls	r3, r3, #24
 8003fb8:	4933      	ldr	r1, [pc, #204]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbe:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fb00 	bl	80025c8 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fe fafc 	bl	80025c8 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e04d      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x41c>
 8003fea:	e045      	b.n	8004078 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fe fae9 	bl	80025c8 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fe fae5 	bl	80025c8 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e036      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <HAL_RCC_OscConfig+0x44a>
 8004018:	e02e      	b.n	8004078 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e029      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	429a      	cmp	r2, r3
 8004038:	d11c      	bne.n	8004074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d115      	bne.n	8004074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800404e:	4013      	ands	r3, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004054:	4293      	cmp	r3, r2
 8004056:	d10d      	bne.n	8004074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d106      	bne.n	8004074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40007000 	.word	0x40007000
 8004088:	40023800 	.word	0x40023800
 800408c:	42470060 	.word	0x42470060

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0cc      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b68      	ldr	r3, [pc, #416]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d90c      	bls.n	80040cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b65      	ldr	r3, [pc, #404]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b63      	ldr	r3, [pc, #396]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0b8      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e4:	4b59      	ldr	r3, [pc, #356]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a58      	ldr	r2, [pc, #352]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040fc:	4b53      	ldr	r3, [pc, #332]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a52      	ldr	r2, [pc, #328]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b50      	ldr	r3, [pc, #320]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	494d      	ldr	r1, [pc, #308]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d044      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d119      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e07f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d003      	beq.n	800414e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414a:	2b03      	cmp	r3, #3
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b3f      	ldr	r3, [pc, #252]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e06f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415e:	4b3b      	ldr	r3, [pc, #236]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e067      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4934      	ldr	r1, [pc, #208]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004180:	f7fe fa22 	bl	80025c8 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fe fa1e 	bl	80025c8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e04f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 020c 	and.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1eb      	bne.n	8004188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d20c      	bcs.n	80041d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e032      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4916      	ldr	r1, [pc, #88]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	490e      	ldr	r1, [pc, #56]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004216:	f000 f821 	bl	800425c <HAL_RCC_GetSysClockFreq>
 800421a:	4601      	mov	r1, r0
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	fa21 f303 	lsr.w	r3, r1, r3
 800422e:	4a09      	ldr	r2, [pc, #36]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe f982 	bl	8002540 <HAL_InitTick>

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023c00 	.word	0x40023c00
 800424c:	40023800 	.word	0x40023800
 8004250:	08005530 	.word	0x08005530
 8004254:	2000004c 	.word	0x2000004c
 8004258:	20000050 	.word	0x20000050

0800425c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800425c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	2300      	movs	r3, #0
 800426c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004272:	4b63      	ldr	r3, [pc, #396]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b04      	cmp	r3, #4
 800427c:	d007      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x32>
 800427e:	2b08      	cmp	r3, #8
 8004280:	d008      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x38>
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 80b4 	bne.w	80043f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004288:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800428a:	60bb      	str	r3, [r7, #8]
       break;
 800428c:	e0b3      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428e:	4b5e      	ldr	r3, [pc, #376]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004290:	60bb      	str	r3, [r7, #8]
      break;
 8004292:	e0b0      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004294:	4b5a      	ldr	r3, [pc, #360]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429e:	4b58      	ldr	r3, [pc, #352]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d04a      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042aa:	4b55      	ldr	r3, [pc, #340]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	ea03 0501 	and.w	r5, r3, r1
 80042c0:	ea04 0602 	and.w	r6, r4, r2
 80042c4:	4629      	mov	r1, r5
 80042c6:	4632      	mov	r2, r6
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	0154      	lsls	r4, r2, #5
 80042d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042d6:	014b      	lsls	r3, r1, #5
 80042d8:	4619      	mov	r1, r3
 80042da:	4622      	mov	r2, r4
 80042dc:	1b49      	subs	r1, r1, r5
 80042de:	eb62 0206 	sbc.w	r2, r2, r6
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f04f 0400 	mov.w	r4, #0
 80042ea:	0194      	lsls	r4, r2, #6
 80042ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042f0:	018b      	lsls	r3, r1, #6
 80042f2:	1a5b      	subs	r3, r3, r1
 80042f4:	eb64 0402 	sbc.w	r4, r4, r2
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	00e2      	lsls	r2, r4, #3
 8004302:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004306:	00d9      	lsls	r1, r3, #3
 8004308:	460b      	mov	r3, r1
 800430a:	4614      	mov	r4, r2
 800430c:	195b      	adds	r3, r3, r5
 800430e:	eb44 0406 	adc.w	r4, r4, r6
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	0262      	lsls	r2, r4, #9
 800431c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004320:	0259      	lsls	r1, r3, #9
 8004322:	460b      	mov	r3, r1
 8004324:	4614      	mov	r4, r2
 8004326:	4618      	mov	r0, r3
 8004328:	4621      	mov	r1, r4
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f04f 0400 	mov.w	r4, #0
 8004330:	461a      	mov	r2, r3
 8004332:	4623      	mov	r3, r4
 8004334:	f7fc fb66 	bl	8000a04 <__aeabi_uldivmod>
 8004338:	4603      	mov	r3, r0
 800433a:	460c      	mov	r4, r1
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e049      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004340:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	f04f 0400 	mov.w	r4, #0
 800434a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	ea03 0501 	and.w	r5, r3, r1
 8004356:	ea04 0602 	and.w	r6, r4, r2
 800435a:	4629      	mov	r1, r5
 800435c:	4632      	mov	r2, r6
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	f04f 0400 	mov.w	r4, #0
 8004366:	0154      	lsls	r4, r2, #5
 8004368:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800436c:	014b      	lsls	r3, r1, #5
 800436e:	4619      	mov	r1, r3
 8004370:	4622      	mov	r2, r4
 8004372:	1b49      	subs	r1, r1, r5
 8004374:	eb62 0206 	sbc.w	r2, r2, r6
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	f04f 0400 	mov.w	r4, #0
 8004380:	0194      	lsls	r4, r2, #6
 8004382:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004386:	018b      	lsls	r3, r1, #6
 8004388:	1a5b      	subs	r3, r3, r1
 800438a:	eb64 0402 	sbc.w	r4, r4, r2
 800438e:	f04f 0100 	mov.w	r1, #0
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	00e2      	lsls	r2, r4, #3
 8004398:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800439c:	00d9      	lsls	r1, r3, #3
 800439e:	460b      	mov	r3, r1
 80043a0:	4614      	mov	r4, r2
 80043a2:	195b      	adds	r3, r3, r5
 80043a4:	eb44 0406 	adc.w	r4, r4, r6
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	02a2      	lsls	r2, r4, #10
 80043b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043b6:	0299      	lsls	r1, r3, #10
 80043b8:	460b      	mov	r3, r1
 80043ba:	4614      	mov	r4, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	4621      	mov	r1, r4
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f04f 0400 	mov.w	r4, #0
 80043c6:	461a      	mov	r2, r3
 80043c8:	4623      	mov	r3, r4
 80043ca:	f7fc fb1b 	bl	8000a04 <__aeabi_uldivmod>
 80043ce:	4603      	mov	r3, r0
 80043d0:	460c      	mov	r4, r1
 80043d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	3301      	adds	r3, #1
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	60bb      	str	r3, [r7, #8]
      break;
 80043ee:	e002      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043f2:	60bb      	str	r3, [r7, #8]
      break;
 80043f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f6:	68bb      	ldr	r3, [r7, #8]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	00f42400 	.word	0x00f42400
 8004408:	007a1200 	.word	0x007a1200

0800440c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCC_GetHCLKFreq+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	2000004c 	.word	0x2000004c

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004428:	f7ff fff0 	bl	800440c <HAL_RCC_GetHCLKFreq>
 800442c:	4601      	mov	r1, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4a03      	ldr	r2, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443a:	5cd3      	ldrb	r3, [r2, r3]
 800443c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	08005540 	.word	0x08005540

0800444c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004450:	f7ff ffdc 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004454:	4601      	mov	r1, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0b5b      	lsrs	r3, r3, #13
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4a03      	ldr	r2, [pc, #12]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004462:	5cd3      	ldrb	r3, [r2, r3]
 8004464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	08005540 	.word	0x08005540

08004474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e056      	b.n	8004534 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fd fc95 	bl	8001dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	ea42 0103 	orr.w	r1, r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	f003 0104 	and.w	r1, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_SPI_Transmit+0x22>
 800455a:	2302      	movs	r3, #2
 800455c:	e11e      	b.n	800479c <HAL_SPI_Transmit+0x260>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004566:	f7fe f82f 	bl	80025c8 <HAL_GetTick>
 800456a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d002      	beq.n	8004582 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800457c:	2302      	movs	r3, #2
 800457e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004580:	e103      	b.n	800478a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_Transmit+0x52>
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004592:	e0fa      	b.n	800478a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2203      	movs	r2, #3
 8004598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	88fa      	ldrh	r2, [r7, #6]
 80045b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045da:	d107      	bne.n	80045ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d007      	beq.n	800460a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004612:	d14b      	bne.n	80046ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_SPI_Transmit+0xe6>
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d13e      	bne.n	80046a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	1c9a      	adds	r2, r3, #2
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004646:	e02b      	b.n	80046a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b02      	cmp	r3, #2
 8004654:	d112      	bne.n	800467c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	881a      	ldrh	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	1c9a      	adds	r2, r3, #2
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	86da      	strh	r2, [r3, #54]	; 0x36
 800467a:	e011      	b.n	80046a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467c:	f7fd ffa4 	bl	80025c8 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d803      	bhi.n	8004694 <HAL_SPI_Transmit+0x158>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d102      	bne.n	800469a <HAL_SPI_Transmit+0x15e>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800469e:	e074      	b.n	800478a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ce      	bne.n	8004648 <HAL_SPI_Transmit+0x10c>
 80046aa:	e04c      	b.n	8004746 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_SPI_Transmit+0x17e>
 80046b4:	8afb      	ldrh	r3, [r7, #22]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d140      	bne.n	800473c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046e0:	e02c      	b.n	800473c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d113      	bne.n	8004718 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	7812      	ldrb	r2, [r2, #0]
 80046fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	86da      	strh	r2, [r3, #54]	; 0x36
 8004716:	e011      	b.n	800473c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004718:	f7fd ff56 	bl	80025c8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d803      	bhi.n	8004730 <HAL_SPI_Transmit+0x1f4>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d102      	bne.n	8004736 <HAL_SPI_Transmit+0x1fa>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	77fb      	strb	r3, [r7, #31]
          goto error;
 800473a:	e026      	b.n	800478a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1cd      	bne.n	80046e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	6839      	ldr	r1, [r7, #0]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f894 	bl	8004878 <SPI_EndRxTxTransaction>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e000      	b.n	800478a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004788:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800479a:	7ffb      	ldrb	r3, [r7, #31]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047b4:	e04c      	b.n	8004850 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d048      	beq.n	8004850 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047be:	f7fd ff03 	bl	80025c8 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d902      	bls.n	80047d4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d13d      	bne.n	8004850 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ec:	d111      	bne.n	8004812 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f6:	d004      	beq.n	8004802 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004800:	d107      	bne.n	8004812 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004810:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481a:	d10f      	bne.n	800483c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800483a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e00f      	b.n	8004870 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	429a      	cmp	r2, r3
 800486c:	d1a3      	bne.n	80047b6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <SPI_EndRxTxTransaction+0x7c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <SPI_EndRxTxTransaction+0x80>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	0d5b      	lsrs	r3, r3, #21
 8004890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004894:	fb02 f303 	mul.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a2:	d112      	bne.n	80048ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	2180      	movs	r1, #128	; 0x80
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff ff78 	bl	80047a4 <SPI_WaitFlagStateUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e00f      	b.n	80048ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d0f2      	beq.n	80048ca <SPI_EndRxTxTransaction+0x52>
 80048e4:	e000      	b.n	80048e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80048e6:	bf00      	nop
  }

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	2000004c 	.word	0x2000004c
 80048f8:	165e9f81 	.word	0x165e9f81

080048fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e03f      	b.n	800498e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fd fa9c 	bl	8001e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800493e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f829 	bl	8004998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049da:	f023 030c 	bic.w	r3, r3, #12
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	430b      	orrs	r3, r1
 80049e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a06:	f040 818b 	bne.w	8004d20 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4ac1      	ldr	r2, [pc, #772]	; (8004d14 <UART_SetConfig+0x37c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d005      	beq.n	8004a20 <UART_SetConfig+0x88>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4abf      	ldr	r2, [pc, #764]	; (8004d18 <UART_SetConfig+0x380>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	f040 80bd 	bne.w	8004b9a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7ff fd14 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8004a24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	461d      	mov	r5, r3
 8004a2a:	f04f 0600 	mov.w	r6, #0
 8004a2e:	46a8      	mov	r8, r5
 8004a30:	46b1      	mov	r9, r6
 8004a32:	eb18 0308 	adds.w	r3, r8, r8
 8004a36:	eb49 0409 	adc.w	r4, r9, r9
 8004a3a:	4698      	mov	r8, r3
 8004a3c:	46a1      	mov	r9, r4
 8004a3e:	eb18 0805 	adds.w	r8, r8, r5
 8004a42:	eb49 0906 	adc.w	r9, r9, r6
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a5a:	4688      	mov	r8, r1
 8004a5c:	4691      	mov	r9, r2
 8004a5e:	eb18 0005 	adds.w	r0, r8, r5
 8004a62:	eb49 0106 	adc.w	r1, r9, r6
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	f04f 0600 	mov.w	r6, #0
 8004a70:	196b      	adds	r3, r5, r5
 8004a72:	eb46 0406 	adc.w	r4, r6, r6
 8004a76:	461a      	mov	r2, r3
 8004a78:	4623      	mov	r3, r4
 8004a7a:	f7fb ffc3 	bl	8000a04 <__aeabi_uldivmod>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	460c      	mov	r4, r1
 8004a82:	461a      	mov	r2, r3
 8004a84:	4ba5      	ldr	r3, [pc, #660]	; (8004d1c <UART_SetConfig+0x384>)
 8004a86:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	461d      	mov	r5, r3
 8004a94:	f04f 0600 	mov.w	r6, #0
 8004a98:	46a9      	mov	r9, r5
 8004a9a:	46b2      	mov	sl, r6
 8004a9c:	eb19 0309 	adds.w	r3, r9, r9
 8004aa0:	eb4a 040a 	adc.w	r4, sl, sl
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	46a2      	mov	sl, r4
 8004aa8:	eb19 0905 	adds.w	r9, r9, r5
 8004aac:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004abc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ac0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ac4:	4689      	mov	r9, r1
 8004ac6:	4692      	mov	sl, r2
 8004ac8:	eb19 0005 	adds.w	r0, r9, r5
 8004acc:	eb4a 0106 	adc.w	r1, sl, r6
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	461d      	mov	r5, r3
 8004ad6:	f04f 0600 	mov.w	r6, #0
 8004ada:	196b      	adds	r3, r5, r5
 8004adc:	eb46 0406 	adc.w	r4, r6, r6
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	f7fb ff8e 	bl	8000a04 <__aeabi_uldivmod>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b8b      	ldr	r3, [pc, #556]	; (8004d1c <UART_SetConfig+0x384>)
 8004af0:	fba3 1302 	umull	r1, r3, r3, r2
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	2164      	movs	r1, #100	; 0x64
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	3332      	adds	r3, #50	; 0x32
 8004b02:	4a86      	ldr	r2, [pc, #536]	; (8004d1c <UART_SetConfig+0x384>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b10:	4498      	add	r8, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	461d      	mov	r5, r3
 8004b16:	f04f 0600 	mov.w	r6, #0
 8004b1a:	46a9      	mov	r9, r5
 8004b1c:	46b2      	mov	sl, r6
 8004b1e:	eb19 0309 	adds.w	r3, r9, r9
 8004b22:	eb4a 040a 	adc.w	r4, sl, sl
 8004b26:	4699      	mov	r9, r3
 8004b28:	46a2      	mov	sl, r4
 8004b2a:	eb19 0905 	adds.w	r9, r9, r5
 8004b2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b46:	4689      	mov	r9, r1
 8004b48:	4692      	mov	sl, r2
 8004b4a:	eb19 0005 	adds.w	r0, r9, r5
 8004b4e:	eb4a 0106 	adc.w	r1, sl, r6
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	461d      	mov	r5, r3
 8004b58:	f04f 0600 	mov.w	r6, #0
 8004b5c:	196b      	adds	r3, r5, r5
 8004b5e:	eb46 0406 	adc.w	r4, r6, r6
 8004b62:	461a      	mov	r2, r3
 8004b64:	4623      	mov	r3, r4
 8004b66:	f7fb ff4d 	bl	8000a04 <__aeabi_uldivmod>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b6a      	ldr	r3, [pc, #424]	; (8004d1c <UART_SetConfig+0x384>)
 8004b72:	fba3 1302 	umull	r1, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2164      	movs	r1, #100	; 0x64
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	3332      	adds	r3, #50	; 0x32
 8004b84:	4a65      	ldr	r2, [pc, #404]	; (8004d1c <UART_SetConfig+0x384>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	f003 0207 	and.w	r2, r3, #7
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4442      	add	r2, r8
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	e26f      	b.n	800507a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b9a:	f7ff fc43 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8004b9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	f04f 0600 	mov.w	r6, #0
 8004ba8:	46a8      	mov	r8, r5
 8004baa:	46b1      	mov	r9, r6
 8004bac:	eb18 0308 	adds.w	r3, r8, r8
 8004bb0:	eb49 0409 	adc.w	r4, r9, r9
 8004bb4:	4698      	mov	r8, r3
 8004bb6:	46a1      	mov	r9, r4
 8004bb8:	eb18 0805 	adds.w	r8, r8, r5
 8004bbc:	eb49 0906 	adc.w	r9, r9, r6
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bd4:	4688      	mov	r8, r1
 8004bd6:	4691      	mov	r9, r2
 8004bd8:	eb18 0005 	adds.w	r0, r8, r5
 8004bdc:	eb49 0106 	adc.w	r1, r9, r6
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	461d      	mov	r5, r3
 8004be6:	f04f 0600 	mov.w	r6, #0
 8004bea:	196b      	adds	r3, r5, r5
 8004bec:	eb46 0406 	adc.w	r4, r6, r6
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4623      	mov	r3, r4
 8004bf4:	f7fb ff06 	bl	8000a04 <__aeabi_uldivmod>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <UART_SetConfig+0x384>)
 8004c00:	fba3 2302 	umull	r2, r3, r3, r2
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	461d      	mov	r5, r3
 8004c0e:	f04f 0600 	mov.w	r6, #0
 8004c12:	46a9      	mov	r9, r5
 8004c14:	46b2      	mov	sl, r6
 8004c16:	eb19 0309 	adds.w	r3, r9, r9
 8004c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c1e:	4699      	mov	r9, r3
 8004c20:	46a2      	mov	sl, r4
 8004c22:	eb19 0905 	adds.w	r9, r9, r5
 8004c26:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c3e:	4689      	mov	r9, r1
 8004c40:	4692      	mov	sl, r2
 8004c42:	eb19 0005 	adds.w	r0, r9, r5
 8004c46:	eb4a 0106 	adc.w	r1, sl, r6
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	461d      	mov	r5, r3
 8004c50:	f04f 0600 	mov.w	r6, #0
 8004c54:	196b      	adds	r3, r5, r5
 8004c56:	eb46 0406 	adc.w	r4, r6, r6
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	4623      	mov	r3, r4
 8004c5e:	f7fb fed1 	bl	8000a04 <__aeabi_uldivmod>
 8004c62:	4603      	mov	r3, r0
 8004c64:	460c      	mov	r4, r1
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <UART_SetConfig+0x384>)
 8004c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2164      	movs	r1, #100	; 0x64
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	3332      	adds	r3, #50	; 0x32
 8004c7c:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <UART_SetConfig+0x384>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c8a:	4498      	add	r8, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	461d      	mov	r5, r3
 8004c90:	f04f 0600 	mov.w	r6, #0
 8004c94:	46a9      	mov	r9, r5
 8004c96:	46b2      	mov	sl, r6
 8004c98:	eb19 0309 	adds.w	r3, r9, r9
 8004c9c:	eb4a 040a 	adc.w	r4, sl, sl
 8004ca0:	4699      	mov	r9, r3
 8004ca2:	46a2      	mov	sl, r4
 8004ca4:	eb19 0905 	adds.w	r9, r9, r5
 8004ca8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cc0:	4689      	mov	r9, r1
 8004cc2:	4692      	mov	sl, r2
 8004cc4:	eb19 0005 	adds.w	r0, r9, r5
 8004cc8:	eb4a 0106 	adc.w	r1, sl, r6
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	f04f 0600 	mov.w	r6, #0
 8004cd6:	196b      	adds	r3, r5, r5
 8004cd8:	eb46 0406 	adc.w	r4, r6, r6
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4623      	mov	r3, r4
 8004ce0:	f7fb fe90 	bl	8000a04 <__aeabi_uldivmod>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <UART_SetConfig+0x384>)
 8004cec:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	2164      	movs	r1, #100	; 0x64
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	3332      	adds	r3, #50	; 0x32
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <UART_SetConfig+0x384>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	f003 0207 	and.w	r2, r3, #7
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4442      	add	r2, r8
 8004d10:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004d12:	e1b2      	b.n	800507a <UART_SetConfig+0x6e2>
 8004d14:	40011000 	.word	0x40011000
 8004d18:	40011400 	.word	0x40011400
 8004d1c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4ad7      	ldr	r2, [pc, #860]	; (8005084 <UART_SetConfig+0x6ec>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d005      	beq.n	8004d36 <UART_SetConfig+0x39e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4ad6      	ldr	r2, [pc, #856]	; (8005088 <UART_SetConfig+0x6f0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	f040 80d1 	bne.w	8004ed8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d36:	f7ff fb89 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8004d3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	469a      	mov	sl, r3
 8004d40:	f04f 0b00 	mov.w	fp, #0
 8004d44:	46d0      	mov	r8, sl
 8004d46:	46d9      	mov	r9, fp
 8004d48:	eb18 0308 	adds.w	r3, r8, r8
 8004d4c:	eb49 0409 	adc.w	r4, r9, r9
 8004d50:	4698      	mov	r8, r3
 8004d52:	46a1      	mov	r9, r4
 8004d54:	eb18 080a 	adds.w	r8, r8, sl
 8004d58:	eb49 090b 	adc.w	r9, r9, fp
 8004d5c:	f04f 0100 	mov.w	r1, #0
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d70:	4688      	mov	r8, r1
 8004d72:	4691      	mov	r9, r2
 8004d74:	eb1a 0508 	adds.w	r5, sl, r8
 8004d78:	eb4b 0609 	adc.w	r6, fp, r9
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	4619      	mov	r1, r3
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	f04f 0400 	mov.w	r4, #0
 8004d8e:	0094      	lsls	r4, r2, #2
 8004d90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d94:	008b      	lsls	r3, r1, #2
 8004d96:	461a      	mov	r2, r3
 8004d98:	4623      	mov	r3, r4
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	f7fb fe31 	bl	8000a04 <__aeabi_uldivmod>
 8004da2:	4603      	mov	r3, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	461a      	mov	r2, r3
 8004da8:	4bb8      	ldr	r3, [pc, #736]	; (800508c <UART_SetConfig+0x6f4>)
 8004daa:	fba3 2302 	umull	r2, r3, r3, r2
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	469b      	mov	fp, r3
 8004db8:	f04f 0c00 	mov.w	ip, #0
 8004dbc:	46d9      	mov	r9, fp
 8004dbe:	46e2      	mov	sl, ip
 8004dc0:	eb19 0309 	adds.w	r3, r9, r9
 8004dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8004dc8:	4699      	mov	r9, r3
 8004dca:	46a2      	mov	sl, r4
 8004dcc:	eb19 090b 	adds.w	r9, r9, fp
 8004dd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dd4:	f04f 0100 	mov.w	r1, #0
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004de8:	4689      	mov	r9, r1
 8004dea:	4692      	mov	sl, r2
 8004dec:	eb1b 0509 	adds.w	r5, fp, r9
 8004df0:	eb4c 060a 	adc.w	r6, ip, sl
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	f04f 0400 	mov.w	r4, #0
 8004e06:	0094      	lsls	r4, r2, #2
 8004e08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e0c:	008b      	lsls	r3, r1, #2
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4623      	mov	r3, r4
 8004e12:	4628      	mov	r0, r5
 8004e14:	4631      	mov	r1, r6
 8004e16:	f7fb fdf5 	bl	8000a04 <__aeabi_uldivmod>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4b9a      	ldr	r3, [pc, #616]	; (800508c <UART_SetConfig+0x6f4>)
 8004e22:	fba3 1302 	umull	r1, r3, r3, r2
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	2164      	movs	r1, #100	; 0x64
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	3332      	adds	r3, #50	; 0x32
 8004e34:	4a95      	ldr	r2, [pc, #596]	; (800508c <UART_SetConfig+0x6f4>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e40:	4498      	add	r8, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	469b      	mov	fp, r3
 8004e46:	f04f 0c00 	mov.w	ip, #0
 8004e4a:	46d9      	mov	r9, fp
 8004e4c:	46e2      	mov	sl, ip
 8004e4e:	eb19 0309 	adds.w	r3, r9, r9
 8004e52:	eb4a 040a 	adc.w	r4, sl, sl
 8004e56:	4699      	mov	r9, r3
 8004e58:	46a2      	mov	sl, r4
 8004e5a:	eb19 090b 	adds.w	r9, r9, fp
 8004e5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e62:	f04f 0100 	mov.w	r1, #0
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e76:	4689      	mov	r9, r1
 8004e78:	4692      	mov	sl, r2
 8004e7a:	eb1b 0509 	adds.w	r5, fp, r9
 8004e7e:	eb4c 060a 	adc.w	r6, ip, sl
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4619      	mov	r1, r3
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	f04f 0400 	mov.w	r4, #0
 8004e94:	0094      	lsls	r4, r2, #2
 8004e96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e9a:	008b      	lsls	r3, r1, #2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	f7fb fdae 	bl	8000a04 <__aeabi_uldivmod>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	461a      	mov	r2, r3
 8004eae:	4b77      	ldr	r3, [pc, #476]	; (800508c <UART_SetConfig+0x6f4>)
 8004eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2164      	movs	r1, #100	; 0x64
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a72      	ldr	r2, [pc, #456]	; (800508c <UART_SetConfig+0x6f4>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 020f 	and.w	r2, r3, #15
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4442      	add	r2, r8
 8004ed4:	609a      	str	r2, [r3, #8]
 8004ed6:	e0d0      	b.n	800507a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7ff faa4 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8004edc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	469a      	mov	sl, r3
 8004ee2:	f04f 0b00 	mov.w	fp, #0
 8004ee6:	46d0      	mov	r8, sl
 8004ee8:	46d9      	mov	r9, fp
 8004eea:	eb18 0308 	adds.w	r3, r8, r8
 8004eee:	eb49 0409 	adc.w	r4, r9, r9
 8004ef2:	4698      	mov	r8, r3
 8004ef4:	46a1      	mov	r9, r4
 8004ef6:	eb18 080a 	adds.w	r8, r8, sl
 8004efa:	eb49 090b 	adc.w	r9, r9, fp
 8004efe:	f04f 0100 	mov.w	r1, #0
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f12:	4688      	mov	r8, r1
 8004f14:	4691      	mov	r9, r2
 8004f16:	eb1a 0508 	adds.w	r5, sl, r8
 8004f1a:	eb4b 0609 	adc.w	r6, fp, r9
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4619      	mov	r1, r3
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	f04f 0400 	mov.w	r4, #0
 8004f30:	0094      	lsls	r4, r2, #2
 8004f32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f36:	008b      	lsls	r3, r1, #2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	4631      	mov	r1, r6
 8004f40:	f7fb fd60 	bl	8000a04 <__aeabi_uldivmod>
 8004f44:	4603      	mov	r3, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b50      	ldr	r3, [pc, #320]	; (800508c <UART_SetConfig+0x6f4>)
 8004f4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	469b      	mov	fp, r3
 8004f5a:	f04f 0c00 	mov.w	ip, #0
 8004f5e:	46d9      	mov	r9, fp
 8004f60:	46e2      	mov	sl, ip
 8004f62:	eb19 0309 	adds.w	r3, r9, r9
 8004f66:	eb4a 040a 	adc.w	r4, sl, sl
 8004f6a:	4699      	mov	r9, r3
 8004f6c:	46a2      	mov	sl, r4
 8004f6e:	eb19 090b 	adds.w	r9, r9, fp
 8004f72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f76:	f04f 0100 	mov.w	r1, #0
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f8a:	4689      	mov	r9, r1
 8004f8c:	4692      	mov	sl, r2
 8004f8e:	eb1b 0509 	adds.w	r5, fp, r9
 8004f92:	eb4c 060a 	adc.w	r6, ip, sl
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	f04f 0400 	mov.w	r4, #0
 8004fa8:	0094      	lsls	r4, r2, #2
 8004faa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fae:	008b      	lsls	r3, r1, #2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	f7fb fd24 	bl	8000a04 <__aeabi_uldivmod>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4b32      	ldr	r3, [pc, #200]	; (800508c <UART_SetConfig+0x6f4>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	; 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	3332      	adds	r3, #50	; 0x32
 8004fd6:	4a2d      	ldr	r2, [pc, #180]	; (800508c <UART_SetConfig+0x6f4>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe2:	4498      	add	r8, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	469b      	mov	fp, r3
 8004fe8:	f04f 0c00 	mov.w	ip, #0
 8004fec:	46d9      	mov	r9, fp
 8004fee:	46e2      	mov	sl, ip
 8004ff0:	eb19 0309 	adds.w	r3, r9, r9
 8004ff4:	eb4a 040a 	adc.w	r4, sl, sl
 8004ff8:	4699      	mov	r9, r3
 8004ffa:	46a2      	mov	sl, r4
 8004ffc:	eb19 090b 	adds.w	r9, r9, fp
 8005000:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005010:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005014:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005018:	4689      	mov	r9, r1
 800501a:	4692      	mov	sl, r2
 800501c:	eb1b 0509 	adds.w	r5, fp, r9
 8005020:	eb4c 060a 	adc.w	r6, ip, sl
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4619      	mov	r1, r3
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	f04f 0400 	mov.w	r4, #0
 8005036:	0094      	lsls	r4, r2, #2
 8005038:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800503c:	008b      	lsls	r3, r1, #2
 800503e:	461a      	mov	r2, r3
 8005040:	4623      	mov	r3, r4
 8005042:	4628      	mov	r0, r5
 8005044:	4631      	mov	r1, r6
 8005046:	f7fb fcdd 	bl	8000a04 <__aeabi_uldivmod>
 800504a:	4603      	mov	r3, r0
 800504c:	460c      	mov	r4, r1
 800504e:	461a      	mov	r2, r3
 8005050:	4b0e      	ldr	r3, [pc, #56]	; (800508c <UART_SetConfig+0x6f4>)
 8005052:	fba3 1302 	umull	r1, r3, r3, r2
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	2164      	movs	r1, #100	; 0x64
 800505a:	fb01 f303 	mul.w	r3, r1, r3
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	3332      	adds	r3, #50	; 0x32
 8005064:	4a09      	ldr	r2, [pc, #36]	; (800508c <UART_SetConfig+0x6f4>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	f003 020f 	and.w	r2, r3, #15
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4442      	add	r2, r8
 8005076:	609a      	str	r2, [r3, #8]
}
 8005078:	e7ff      	b.n	800507a <UART_SetConfig+0x6e2>
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005084:	40011000 	.word	0x40011000
 8005088:	40011400 	.word	0x40011400
 800508c:	51eb851f 	.word	0x51eb851f

08005090 <__libc_init_array>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	4e0d      	ldr	r6, [pc, #52]	; (80050c8 <__libc_init_array+0x38>)
 8005094:	4c0d      	ldr	r4, [pc, #52]	; (80050cc <__libc_init_array+0x3c>)
 8005096:	1ba4      	subs	r4, r4, r6
 8005098:	10a4      	asrs	r4, r4, #2
 800509a:	2500      	movs	r5, #0
 800509c:	42a5      	cmp	r5, r4
 800509e:	d109      	bne.n	80050b4 <__libc_init_array+0x24>
 80050a0:	4e0b      	ldr	r6, [pc, #44]	; (80050d0 <__libc_init_array+0x40>)
 80050a2:	4c0c      	ldr	r4, [pc, #48]	; (80050d4 <__libc_init_array+0x44>)
 80050a4:	f000 f820 	bl	80050e8 <_init>
 80050a8:	1ba4      	subs	r4, r4, r6
 80050aa:	10a4      	asrs	r4, r4, #2
 80050ac:	2500      	movs	r5, #0
 80050ae:	42a5      	cmp	r5, r4
 80050b0:	d105      	bne.n	80050be <__libc_init_array+0x2e>
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050b8:	4798      	blx	r3
 80050ba:	3501      	adds	r5, #1
 80050bc:	e7ee      	b.n	800509c <__libc_init_array+0xc>
 80050be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050c2:	4798      	blx	r3
 80050c4:	3501      	adds	r5, #1
 80050c6:	e7f2      	b.n	80050ae <__libc_init_array+0x1e>
 80050c8:	08005550 	.word	0x08005550
 80050cc:	08005550 	.word	0x08005550
 80050d0:	08005550 	.word	0x08005550
 80050d4:	08005554 	.word	0x08005554

080050d8 <memset>:
 80050d8:	4402      	add	r2, r0
 80050da:	4603      	mov	r3, r0
 80050dc:	4293      	cmp	r3, r2
 80050de:	d100      	bne.n	80050e2 <memset+0xa>
 80050e0:	4770      	bx	lr
 80050e2:	f803 1b01 	strb.w	r1, [r3], #1
 80050e6:	e7f9      	b.n	80050dc <memset+0x4>

080050e8 <_init>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr

080050f4 <_fini>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr
